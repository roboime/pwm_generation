
hop1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009114  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800929c  0800929c  0001929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092b8  080092b8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080092b8  080092b8  000192b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c0  080092c0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092c4  080092c4  000192c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080092c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008a4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000934  20000934  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd75  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004183  00000000  00000000  0003fe35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  00043fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00045718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260fa  00000000  00000000  00046ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e180  00000000  00000000  0006cde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0521  00000000  00000000  0008af62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016b483  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006574  00000000  00000000  0016b4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009284 	.word	0x08009284

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009284 	.word	0x08009284

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd7c 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f832 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9f6 	bl	80008bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8ea 	bl	80006a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f916 	bl	8000704 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f944 	bl	8000764 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f008 fac0 	bl	8008a60 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004e0:	f000 f890 	bl	8000604 <MX_ADC1_Init>
  MX_TIM3_Init();
 80004e4:	f000 f974 	bl	80007d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	480d      	ldr	r0, [pc, #52]	; (8000520 <main+0x60>)
 80004ec:	f004 fe2e 	bl	800514c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <main+0x64>)
 80004f2:	f000 fe3f 	bl	8001174 <HAL_ADC_Start>
	  yann = HAL_ADC_GetValue(&hadc1); //0 -- 4095;
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <main+0x64>)
 80004f8:	f000 ff0e 	bl	8001318 <HAL_ADC_GetValue>
 80004fc:	4603      	mov	r3, r0
 80004fe:	b29a      	uxth	r2, r3
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <main+0x68>)
 8000502:	801a      	strh	r2, [r3, #0]

	  TIM3->CCR1 = (yann * 16 + yann/16);
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <main+0x68>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <main+0x68>)
 800050c:	8812      	ldrh	r2, [r2, #0]
 800050e:	0912      	lsrs	r2, r2, #4
 8000510:	b292      	uxth	r2, r2
 8000512:	441a      	add	r2, r3
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <main+0x6c>)
 8000516:	635a      	str	r2, [r3, #52]	; 0x34

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000518:	f008 fac8 	bl	8008aac <MX_USB_HOST_Process>
	  HAL_ADC_Start(&hadc1);
 800051c:	e7e8      	b.n	80004f0 <main+0x30>
 800051e:	bf00      	nop
 8000520:	20000114 	.word	0x20000114
 8000524:	2000015c 	.word	0x2000015c
 8000528:	200000bc 	.word	0x200000bc
 800052c:	40000400 	.word	0x40000400

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f008 fdd0 	bl	80090e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fef6 	bl	80043a8 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 fa79 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 f957 	bl	8004898 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 fa62 	bl	8000ab8 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_ADC1_Init+0x98>)
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <MX_ADC1_Init+0x9c>)
 800061a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ADC1_Init+0x98>)
 800061e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000622:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_ADC1_Init+0x98>)
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <MX_ADC1_Init+0xa0>)
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_ADC1_Init+0x98>)
 8000652:	2201      	movs	r2, #1
 8000654:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_ADC1_Init+0x98>)
 8000660:	2201      	movs	r2, #1
 8000662:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_ADC1_Init+0x98>)
 8000666:	f000 fd41 	bl	80010ec <HAL_ADC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000670:	f000 fa22 	bl	8000ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000674:	2301      	movs	r3, #1
 8000676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_ADC1_Init+0x98>)
 8000686:	f000 fe55 	bl	8001334 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000690:	f000 fa12 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000015c 	.word	0x2000015c
 80006a0:	40012000 	.word	0x40012000
 80006a4:	0f000001 	.word	0x0f000001

080006a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <MX_I2C1_Init+0x54>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_I2C1_Init+0x58>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006e6:	f003 f87b 	bl	80037e0 <HAL_I2C_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 f9e2 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000c0 	.word	0x200000c0
 80006fc:	40005400 	.word	0x40005400
 8000700:	000186a0 	.word	0x000186a0

08000704 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_I2S3_Init+0x54>)
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <MX_I2S3_Init+0x58>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_I2S3_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_I2S3_Init+0x54>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_I2S3_Init+0x54>)
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <MX_I2S3_Init+0x5c>)
 800072e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_I2S3_Init+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_I2S3_Init+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_I2S3_Init+0x54>)
 8000744:	f003 f990 	bl	8003a68 <HAL_I2S_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800074e:	f000 f9b3 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001fc 	.word	0x200001fc
 800075c:	40003c00 	.word	0x40003c00
 8000760:	00017700 	.word	0x00017700

08000764 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_SPI1_Init+0x64>)
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_SPI1_Init+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000774:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_SPI1_Init+0x64>)
 80007b0:	220a      	movs	r2, #10
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_SPI1_Init+0x64>)
 80007b6:	f004 fb97 	bl	8004ee8 <HAL_SPI_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c0:	f000 f97a 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001a4 	.word	0x200001a4
 80007cc:	40013000 	.word	0x40013000

080007d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	; 0x38
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000802:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <MX_TIM3_Init+0xe8>)
 8000804:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_TIM3_Init+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000818:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_TIM3_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000828:	f004 fbe7 	bl	8004ffa <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000832:	f000 f941 	bl	8000ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800083c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000840:	4619      	mov	r1, r3
 8000842:	481c      	ldr	r0, [pc, #112]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000844:	f004 fe0c 	bl	8005460 <HAL_TIM_ConfigClockSource>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800084e:	f000 f933 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000852:	4818      	ldr	r0, [pc, #96]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000854:	f004 fc20 	bl	8005098 <HAL_TIM_PWM_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800085e:	f000 f92b 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	4619      	mov	r1, r3
 8000870:	4810      	ldr	r0, [pc, #64]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000872:	f005 f9cd 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800087c:	f000 f91c 	bl	8000ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000880:	2360      	movs	r3, #96	; 0x60
 8000882:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <MX_TIM3_Init+0xe4>)
 8000898:	f004 fd20 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008a2:	f000 f909 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <MX_TIM3_Init+0xe4>)
 80008a8:	f000 faaa 	bl	8000e00 <HAL_TIM_MspPostInit>

}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000114 	.word	0x20000114
 80008b8:	40000400 	.word	0x40000400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b72      	ldr	r3, [pc, #456]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a71      	ldr	r2, [pc, #452]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b6f      	ldr	r3, [pc, #444]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a6a      	ldr	r2, [pc, #424]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b68      	ldr	r3, [pc, #416]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a63      	ldr	r2, [pc, #396]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a5c      	ldr	r2, [pc, #368]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b56      	ldr	r3, [pc, #344]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a55      	ldr	r2, [pc, #340]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b53      	ldr	r3, [pc, #332]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b4f      	ldr	r3, [pc, #316]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a4e      	ldr	r2, [pc, #312]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b4c      	ldr	r3, [pc, #304]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	4849      	ldr	r0, [pc, #292]	; (8000aa4 <MX_GPIO_Init+0x1e8>)
 8000980:	f001 f9a4 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2101      	movs	r1, #1
 8000988:	4847      	ldr	r0, [pc, #284]	; (8000aa8 <MX_GPIO_Init+0x1ec>)
 800098a:	f001 f99f 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	2200      	movs	r2, #0
 8000990:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000994:	4845      	ldr	r0, [pc, #276]	; (8000aac <MX_GPIO_Init+0x1f0>)
 8000996:	f001 f999 	bl	8001ccc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099a:	2308      	movs	r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	483c      	ldr	r0, [pc, #240]	; (8000aa4 <MX_GPIO_Init+0x1e8>)
 80009b2:	f000 ffef 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0x1ec>)
 80009ce:	f000 ffe1 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e2:	2305      	movs	r3, #5
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0x1ec>)
 80009ee:	f000 ffd1 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x1f4>)
 8000a08:	f000 ffc4 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0x1f8>)
 8000a20:	f000 ffb8 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a36:	2305      	movs	r3, #5
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <MX_GPIO_Init+0x1f8>)
 8000a42:	f000 ffa7 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a46:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a4a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_GPIO_Init+0x1f0>)
 8000a60:	f000 ff98 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a64:	2320      	movs	r3, #32
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_GPIO_Init+0x1f0>)
 8000a78:	f000 ff8c 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a80:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_GPIO_Init+0x1e8>)
 8000a92:	f000 ff7f 	bl	8001994 <HAL_GPIO_Init>

}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b02:	2007      	movs	r0, #7
 8000b04:	f000 ff04 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_ADC_MspInit+0x7c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d127      	bne.n	8000b86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_ADC_MspInit+0x80>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <HAL_ADC_MspInit+0x80>)
 8000b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_ADC_MspInit+0x80>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_ADC_MspInit+0x80>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_ADC_MspInit+0x80>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_ADC_MspInit+0x80>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b72:	2303      	movs	r3, #3
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_ADC_MspInit+0x84>)
 8000b82:	f000 ff07 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40012000 	.word	0x40012000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <HAL_I2C_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12c      	bne.n	8000c18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bda:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bec:	2304      	movs	r3, #4
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000bf8:	f000 fecc 	bl	8001994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40005400 	.word	0x40005400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <HAL_I2S_MspInit+0xf0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d15a      	bne.n	8000d12 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c60:	23c0      	movs	r3, #192	; 0xc0
 8000c62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fffb 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c78:	f7ff ff1e 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_I2S_MspInit+0xf4>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480e      	ldr	r0, [pc, #56]	; (8000d24 <HAL_I2S_MspInit+0xf8>)
 8000cec:	f000 fe52 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cf0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d02:	2306      	movs	r3, #6
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <HAL_I2S_MspInit+0xfc>)
 8000d0e:	f000 fe41 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40003c00 	.word	0x40003c00
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020800 	.word	0x40020800

08000d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_SPI_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12b      	bne.n	8000da6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_SPI_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d86:	23e0      	movs	r3, #224	; 0xe0
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d96:	2305      	movs	r3, #5
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_SPI_MspInit+0x8c>)
 8000da2:	f000 fdf7 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40013000 	.word	0x40013000
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10d      	bne.n	8000dea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_TIM_Base_MspInit+0x40>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HAL_TIM_Base_MspInit+0x40>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_TIM_Base_MspInit+0x40>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40000400 	.word	0x40000400
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <HAL_TIM_MspPostInit+0x68>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d11d      	bne.n	8000e5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_TIM_MspPostInit+0x6c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_TIM_MspPostInit+0x6c>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_TIM_MspPostInit+0x6c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_TIM_MspPostInit+0x70>)
 8000e5a:	f000 fd9b 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020800 	.word	0x40020800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8d0 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <OTG_FS_IRQHandler+0x10>)
 8000ece:	f001 f981 	bl	80021d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000620 	.word	0x20000620

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f008 f8b0 	bl	8009070 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20020000 	.word	0x20020000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	200000ac 	.word	0x200000ac
 8000f44:	20000938 	.word	0x20000938

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ffd7 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f008 f86f 	bl	800907c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fa8f 	bl	80004c0 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fb0:	080092c8 	.word	0x080092c8
  ldr r2, =_sbss
 8000fb4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fb8:	20000934 	.word	0x20000934

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_Init+0x40>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_Init+0x40>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_Init+0x40>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 fc91 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f808 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fd66 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fca9 	bl	800197a <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 fc71 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	20000008 	.word	0x20000008
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000244 	.word	0x20000244

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000244 	.word	0x20000244

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008

080010ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e033      	b.n	800116a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d109      	bne.n	800111e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fd02 	bl	8000b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2b00      	cmp	r3, #0
 8001128:	d118      	bne.n	800115c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001132:	f023 0302 	bic.w	r3, r3, #2
 8001136:	f043 0202 	orr.w	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fa1a 	bl	8001578 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f023 0303 	bic.w	r3, r3, #3
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
 800115a:	e001      	b.n	8001160 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_ADC_Start+0x1a>
 800118a:	2302      	movs	r3, #2
 800118c:	e0b2      	b.n	80012f4 <HAL_ADC_Start+0x180>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d018      	beq.n	80011d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011b4:	4b52      	ldr	r3, [pc, #328]	; (8001300 <HAL_ADC_Start+0x18c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_ADC_Start+0x190>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9a      	lsrs	r2, r3, #18
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f9      	bne.n	80011ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d17a      	bne.n	80012da <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800120e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001222:	d106      	bne.n	8001232 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	f023 0206 	bic.w	r2, r3, #6
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
 8001230:	e002      	b.n	8001238 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001240:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_ADC_Start+0x194>)
 8001242:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800124c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	2b00      	cmp	r3, #0
 8001258:	d12a      	bne.n	80012b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <HAL_ADC_Start+0x198>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d015      	beq.n	8001290 <HAL_ADC_Start+0x11c>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <HAL_ADC_Start+0x19c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d105      	bne.n	800127a <HAL_ADC_Start+0x106>
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_ADC_Start+0x194>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00a      	beq.n	8001290 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a25      	ldr	r2, [pc, #148]	; (8001314 <HAL_ADC_Start+0x1a0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d136      	bne.n	80012f2 <HAL_ADC_Start+0x17e>
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_ADC_Start+0x194>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b00      	cmp	r3, #0
 800128e:	d130      	bne.n	80012f2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d129      	bne.n	80012f2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	e020      	b.n	80012f2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <HAL_ADC_Start+0x198>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d11b      	bne.n	80012f2 <HAL_ADC_Start+0x17e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d114      	bne.n	80012f2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	e00b      	b.n	80012f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f043 0210 	orr.w	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83
 8001308:	40012300 	.word	0x40012300
 800130c:	40012000 	.word	0x40012000
 8001310:	40012100 	.word	0x40012100
 8001314:	40012200 	.word	0x40012200

08001318 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1c>
 800134c:	2302      	movs	r3, #2
 800134e:	e105      	b.n	800155c <HAL_ADC_ConfigChannel+0x228>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b09      	cmp	r3, #9
 800135e:	d925      	bls.n	80013ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68d9      	ldr	r1, [r3, #12]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	3b1e      	subs	r3, #30
 8001376:	2207      	movs	r2, #7
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43da      	mvns	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	400a      	ands	r2, r1
 8001384:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68d9      	ldr	r1, [r3, #12]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	4603      	mov	r3, r0
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4403      	add	r3, r0
 800139e:	3b1e      	subs	r3, #30
 80013a0:	409a      	lsls	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	e022      	b.n	80013f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6919      	ldr	r1, [r3, #16]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	2207      	movs	r2, #7
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	400a      	ands	r2, r1
 80013ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6919      	ldr	r1, [r3, #16]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4403      	add	r3, r0
 80013e8:	409a      	lsls	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d824      	bhi.n	8001444 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3b05      	subs	r3, #5
 800140c:	221f      	movs	r2, #31
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3b05      	subs	r3, #5
 8001436:	fa00 f203 	lsl.w	r2, r0, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
 8001442:	e04c      	b.n	80014de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b0c      	cmp	r3, #12
 800144a:	d824      	bhi.n	8001496 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	3b23      	subs	r3, #35	; 0x23
 800145e:	221f      	movs	r2, #31
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43da      	mvns	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	400a      	ands	r2, r1
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b29b      	uxth	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b23      	subs	r3, #35	; 0x23
 8001488:	fa00 f203 	lsl.w	r2, r0, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
 8001494:	e023      	b.n	80014de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	3b41      	subs	r3, #65	; 0x41
 80014a8:	221f      	movs	r2, #31
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	400a      	ands	r2, r1
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3b41      	subs	r3, #65	; 0x41
 80014d2:	fa00 f203 	lsl.w	r2, r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_ADC_ConfigChannel+0x234>)
 80014e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a21      	ldr	r2, [pc, #132]	; (800156c <HAL_ADC_ConfigChannel+0x238>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d109      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1cc>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b12      	cmp	r3, #18
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <HAL_ADC_ConfigChannel+0x238>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d123      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x21e>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b10      	cmp	r3, #16
 8001510:	d003      	beq.n	800151a <HAL_ADC_ConfigChannel+0x1e6>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b11      	cmp	r3, #17
 8001518:	d11b      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b10      	cmp	r3, #16
 800152c:	d111      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_ADC_ConfigChannel+0x23c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_ADC_ConfigChannel+0x240>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9a      	lsrs	r2, r3, #18
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001544:	e002      	b.n	800154c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40012300 	.word	0x40012300
 800156c:	40012000 	.word	0x40012000
 8001570:	20000000 	.word	0x20000000
 8001574:	431bde83 	.word	0x431bde83

08001578 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001580:	4b79      	ldr	r3, [pc, #484]	; (8001768 <ADC_Init+0x1f0>)
 8001582:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	021a      	lsls	r2, r3, #8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	4a58      	ldr	r2, [pc, #352]	; (800176c <ADC_Init+0x1f4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d022      	beq.n	8001656 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800161e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6899      	ldr	r1, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6899      	ldr	r1, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	e00f      	b.n	8001676 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001674:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0202 	bic.w	r2, r2, #2
 8001684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7e1b      	ldrb	r3, [r3, #24]
 8001690:	005a      	lsls	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01b      	beq.n	80016dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6859      	ldr	r1, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	3b01      	subs	r3, #1
 80016d0:	035a      	lsls	r2, r3, #13
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	e007      	b.n	80016ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	3b01      	subs	r3, #1
 8001708:	051a      	lsls	r2, r3, #20
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800172e:	025a      	lsls	r2, r3, #9
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6899      	ldr	r1, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	029a      	lsls	r2, r3, #10
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	609a      	str	r2, [r3, #8]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40012300 	.word	0x40012300
 800176c:	0f000001 	.word	0x0f000001

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff3e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff31 	bl	80017d4 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	e16b      	b.n	8001c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b0:	2201      	movs	r2, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 815a 	bne.w	8001c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d005      	beq.n	80019e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d130      	bne.n	8001a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0201 	and.w	r2, r3, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d017      	beq.n	8001a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d123      	bne.n	8001ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80b4 	beq.w	8001c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b60      	ldr	r3, [pc, #384]	; (8001ca0 <HAL_GPIO_Init+0x30c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a5f      	ldr	r2, [pc, #380]	; (8001ca0 <HAL_GPIO_Init+0x30c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <HAL_GPIO_Init+0x30c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b36:	4a5b      	ldr	r2, [pc, #364]	; (8001ca4 <HAL_GPIO_Init+0x310>)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x314>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d02b      	beq.n	8001bba <HAL_GPIO_Init+0x226>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_GPIO_Init+0x318>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x222>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_GPIO_Init+0x31c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x21e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x320>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x21a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x216>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_GPIO_Init+0x328>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x212>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <HAL_GPIO_Init+0x32c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x20a>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00e      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	e00c      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00a      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001baa:	2304      	movs	r3, #4
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bcc:	4935      	ldr	r1, [pc, #212]	; (8001ca4 <HAL_GPIO_Init+0x310>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bda:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfe:	4a32      	ldr	r2, [pc, #200]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c28:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f ae90 	bls.w	80019b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40021400 	.word	0x40021400
 8001cc0:	40021800 	.word	0x40021800
 8001cc4:	40021c00 	.word	0x40021c00
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce8:	e003      	b.n	8001cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	041a      	lsls	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d00:	b08f      	sub	sp, #60	; 0x3c
 8001d02:	af0a      	add	r7, sp, #40	; 0x28
 8001d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e054      	b.n	8001dba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f006 fef6 	bl	8008b1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 f84c 	bl	8005dec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	687e      	ldr	r6, [r7, #4]
 8001d5c:	466d      	mov	r5, sp
 8001d5e:	f106 0410 	add.w	r4, r6, #16
 8001d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d72:	1d33      	adds	r3, r6, #4
 8001d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f003 ffc6 	bl	8005d08 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 f843 	bl	8005e0e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	687e      	ldr	r6, [r7, #4]
 8001d90:	466d      	mov	r5, sp
 8001d92:	f106 0410 	add.w	r4, r6, #16
 8001d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001da2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da6:	1d33      	adds	r3, r6, #4
 8001da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001daa:	6838      	ldr	r0, [r7, #0]
 8001dac:	f004 f9aa 	bl	8006104 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dc2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001dc2:	b590      	push	{r4, r7, lr}
 8001dc4:	b089      	sub	sp, #36	; 0x24
 8001dc6:	af04      	add	r7, sp, #16
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	4608      	mov	r0, r1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	70fb      	strb	r3, [r7, #3]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70bb      	strb	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_HCD_HC_Init+0x28>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e076      	b.n	8001ed8 <HAL_HCD_HC_Init+0x116>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	333d      	adds	r3, #61	; 0x3d
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3338      	adds	r3, #56	; 0x38
 8001e12:	787a      	ldrb	r2, [r7, #1]
 8001e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3340      	adds	r3, #64	; 0x40
 8001e24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e26:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3339      	adds	r3, #57	; 0x39
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	212c      	movs	r1, #44	; 0x2c
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	333f      	adds	r3, #63	; 0x3f
 8001e48:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	78ba      	ldrb	r2, [r7, #2]
 8001e52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e56:	b2d0      	uxtb	r0, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	333a      	adds	r3, #58	; 0x3a
 8001e64:	4602      	mov	r2, r0
 8001e66:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da09      	bge.n	8001e84 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	212c      	movs	r1, #44	; 0x2c
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	333b      	adds	r3, #59	; 0x3b
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	e008      	b.n	8001e96 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	333b      	adds	r3, #59	; 0x3b
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	333c      	adds	r3, #60	; 0x3c
 8001ea4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ea8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	787c      	ldrb	r4, [r7, #1]
 8001eb0:	78ba      	ldrb	r2, [r7, #2]
 8001eb2:	78f9      	ldrb	r1, [r7, #3]
 8001eb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	f004 fa97 	bl	80063f8 <USB_HC_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}

08001ee0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_HCD_HC_Halt+0x1e>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e00f      	b.n	8001f1e <HAL_HCD_HC_Halt+0x3e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fcd3 	bl	80068ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	4608      	mov	r0, r1
 8001f32:	4611      	mov	r1, r2
 8001f34:	461a      	mov	r2, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	70fb      	strb	r3, [r7, #3]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	70bb      	strb	r3, [r7, #2]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	333b      	adds	r3, #59	; 0x3b
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	333f      	adds	r3, #63	; 0x3f
 8001f62:	787a      	ldrb	r2, [r7, #1]
 8001f64:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f66:	7c3b      	ldrb	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d112      	bne.n	8001f92 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	212c      	movs	r1, #44	; 0x2c
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	3342      	adds	r3, #66	; 0x42
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	333d      	adds	r3, #61	; 0x3d
 8001f8c:	7f3a      	ldrb	r2, [r7, #28]
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e008      	b.n	8001fa4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3342      	adds	r3, #66	; 0x42
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	f200 80c6 	bhi.w	8002138 <HAL_HCD_HC_SubmitRequest+0x210>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08002125 	.word	0x08002125
 8001fbc:	08002029 	.word	0x08002029
 8001fc0:	080020a7 	.word	0x080020a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001fc4:	7c3b      	ldrb	r3, [r7, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	f040 80b8 	bne.w	800213c <HAL_HCD_HC_SubmitRequest+0x214>
 8001fcc:	78bb      	ldrb	r3, [r7, #2]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 80b4 	bne.w	800213c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001fd4:	8b3b      	ldrh	r3, [r7, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3355      	adds	r3, #85	; 0x55
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3355      	adds	r3, #85	; 0x55
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3342      	adds	r3, #66	; 0x42
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002012:	e093      	b.n	800213c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3342      	adds	r3, #66	; 0x42
 8002022:	2202      	movs	r2, #2
 8002024:	701a      	strb	r2, [r3, #0]
      break;
 8002026:	e089      	b.n	800213c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002028:	78bb      	ldrb	r3, [r7, #2]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11d      	bne.n	800206a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3355      	adds	r3, #85	; 0x55
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3342      	adds	r3, #66	; 0x42
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002054:	e073      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3342      	adds	r3, #66	; 0x42
 8002064:	2202      	movs	r2, #2
 8002066:	701a      	strb	r2, [r3, #0]
      break;
 8002068:	e069      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3354      	adds	r3, #84	; 0x54
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3342      	adds	r3, #66	; 0x42
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
      break;
 8002090:	e055      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3342      	adds	r3, #66	; 0x42
 80020a0:	2202      	movs	r2, #2
 80020a2:	701a      	strb	r2, [r3, #0]
      break;
 80020a4:	e04b      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020a6:	78bb      	ldrb	r3, [r7, #2]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d11d      	bne.n	80020e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3355      	adds	r3, #85	; 0x55
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3342      	adds	r3, #66	; 0x42
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020d2:	e034      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3342      	adds	r3, #66	; 0x42
 80020e2:	2202      	movs	r2, #2
 80020e4:	701a      	strb	r2, [r3, #0]
      break;
 80020e6:	e02a      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3354      	adds	r3, #84	; 0x54
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3342      	adds	r3, #66	; 0x42
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
      break;
 800210e:	e016      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3342      	adds	r3, #66	; 0x42
 800211e:	2202      	movs	r2, #2
 8002120:	701a      	strb	r2, [r3, #0]
      break;
 8002122:	e00c      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3342      	adds	r3, #66	; 0x42
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
      break;
 8002136:	e002      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002138:	bf00      	nop
 800213a:	e000      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800213c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3344      	adds	r3, #68	; 0x44
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	8b3a      	ldrh	r2, [r7, #24]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	202c      	movs	r0, #44	; 0x2c
 8002158:	fb00 f303 	mul.w	r3, r0, r3
 800215c:	440b      	add	r3, r1
 800215e:	334c      	adds	r3, #76	; 0x4c
 8002160:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3360      	adds	r3, #96	; 0x60
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3350      	adds	r3, #80	; 0x50
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3339      	adds	r3, #57	; 0x39
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3361      	adds	r3, #97	; 0x61
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	222c      	movs	r2, #44	; 0x2c
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	3338      	adds	r3, #56	; 0x38
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	18d1      	adds	r1, r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	f004 fa26 	bl	8006614 <USB_HC_StartXfer>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop

080021d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 ff49 	bl	8006082 <USB_GetMode>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	f040 80f6 	bne.w	80023e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 ff2d 	bl	800605c <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80ec 	beq.w	80023e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 ff24 	bl	800605c <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800221e:	d104      	bne.n	800222a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002228:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 ff14 	bl	800605c <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800223e:	d104      	bne.n	800224a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002248:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 ff04 	bl	800605c <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800225a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800225e:	d104      	bne.n	800226a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002268:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f003 fef4 	bl	800605c <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d103      	bne.n	8002286 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2202      	movs	r2, #2
 8002284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fee6 	bl	800605c <USB_ReadInterrupts>
 8002290:	4603      	mov	r3, r0
 8002292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800229a:	d11c      	bne.n	80022d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10f      	bne.n	80022d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022b6:	2110      	movs	r1, #16
 80022b8:	6938      	ldr	r0, [r7, #16]
 80022ba:	f003 fdf5 	bl	8005ea8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022be:	6938      	ldr	r0, [r7, #16]
 80022c0:	f003 fe16 	bl	8005ef0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 ffce 	bl	800626c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f006 fca1 	bl	8008c18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 febe 	bl	800605c <USB_ReadInterrupts>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ea:	d102      	bne.n	80022f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f001 fa03 	bl	80036f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 feb0 	bl	800605c <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b08      	cmp	r3, #8
 8002304:	d106      	bne.n	8002314 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f006 fc6a 	bl	8008be0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2208      	movs	r2, #8
 8002312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fe9f 	bl	800605c <USB_ReadInterrupts>
 800231e:	4603      	mov	r3, r0
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b10      	cmp	r3, #16
 8002326:	d101      	bne.n	800232c <HAL_HCD_IRQHandler+0x158>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_HCD_IRQHandler+0x15a>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d012      	beq.n	8002358 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0210 	bic.w	r2, r2, #16
 8002340:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f001 f906 	bl	8003554 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0210 	orr.w	r2, r2, #16
 8002356:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 fe7d 	bl	800605c <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800236c:	d13a      	bne.n	80023e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f004 fa90 	bl	8006898 <USB_HC_ReadInterrupt>
 8002378:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e025      	b.n	80023cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d018      	beq.n	80023c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023aa:	d106      	bne.n	80023ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8ab 	bl	800250e <HCD_HC_IN_IRQHandler>
 80023b8:	e005      	b.n	80023c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fcc6 	bl	8002d52 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3d4      	bcc.n	8002380 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023de:	615a      	str	r2, [r3, #20]
 80023e0:	e000      	b.n	80023e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80023e2:	bf00      	nop
    }
  }
}
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_HCD_Start+0x16>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e013      	b.n	8002428 <HAL_HCD_Start+0x3e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2101      	movs	r1, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f003 ff90 	bl	8006334 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f003 fcd6 	bl	8005dca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_HCD_Stop+0x16>
 8002442:	2302      	movs	r3, #2
 8002444:	e00d      	b.n	8002462 <HAL_HCD_Stop+0x32>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f004 fb8a 	bl	8006b6c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 ff32 	bl	80062e0 <USB_ResetPort>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3360      	adds	r3, #96	; 0x60
 80024a0:	781b      	ldrb	r3, [r3, #0]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3350      	adds	r3, #80	; 0x50
 80024c8:	681b      	ldr	r3, [r3, #0]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 ff76 	bl	80063d4 <USB_GetCurrentFrame>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 ff51 	bl	80063a6 <USB_GetHostSpeed>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d119      	bne.n	8002572 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	2304      	movs	r3, #4
 800254e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	0151      	lsls	r1, r2, #5
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	440a      	add	r2, r1
 8002566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	60d3      	str	r3, [r2, #12]
 8002570:	e101      	b.n	8002776 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002588:	d12b      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3361      	adds	r3, #97	; 0x61
 80025ac:	2207      	movs	r2, #7
 80025ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	0151      	lsls	r1, r2, #5
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	440a      	add	r2, r1
 80025c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 f96d 	bl	80068ba <USB_HC_Halt>
 80025e0:	e0c9      	b.n	8002776 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d109      	bne.n	800260c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	461a      	mov	r2, r3
 8002606:	2320      	movs	r3, #32
 8002608:	6093      	str	r3, [r2, #8]
 800260a:	e0b4      	b.n	8002776 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b08      	cmp	r3, #8
 8002620:	d133      	bne.n	800268a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	0151      	lsls	r1, r2, #5
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	440a      	add	r2, r1
 8002638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3361      	adds	r3, #97	; 0x61
 8002650:	2205      	movs	r2, #5
 8002652:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2310      	movs	r3, #16
 8002664:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2308      	movs	r3, #8
 8002676:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f004 f919 	bl	80068ba <USB_HC_Halt>
 8002688:	e075      	b.n	8002776 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a0:	d134      	bne.n	800270c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	0151      	lsls	r1, r2, #5
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	440a      	add	r2, r1
 80026b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3361      	adds	r3, #97	; 0x61
 80026d0:	2208      	movs	r2, #8
 80026d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	2310      	movs	r3, #16
 80026e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	461a      	mov	r2, r3
 80026f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f004 f8d8 	bl	80068ba <USB_HC_Halt>
 800270a:	e034      	b.n	8002776 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d129      	bne.n	8002776 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	0151      	lsls	r1, r2, #5
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	440a      	add	r2, r1
 8002738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3361      	adds	r3, #97	; 0x61
 8002750:	2206      	movs	r2, #6
 8002752:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f004 f8ab 	bl	80068ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	461a      	mov	r2, r3
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278c:	d122      	bne.n	80027d4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	0151      	lsls	r1, r2, #5
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	440a      	add	r2, r1
 80027a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f004 f87e 	bl	80068ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	461a      	mov	r2, r3
 80027cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027d2:	e2ba      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	f040 811b 	bne.w	8002a22 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	212c      	movs	r1, #44	; 0x2c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3348      	adds	r3, #72	; 0x48
 8002802:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	0159      	lsls	r1, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	440b      	add	r3, r1
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	202c      	movs	r0, #44	; 0x2c
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	440b      	add	r3, r1
 8002824:	3350      	adds	r3, #80	; 0x50
 8002826:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3361      	adds	r3, #97	; 0x61
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	335c      	adds	r3, #92	; 0x5c
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	461a      	mov	r2, r3
 800285a:	2301      	movs	r3, #1
 800285c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	333f      	adds	r3, #63	; 0x3f
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	333f      	adds	r3, #63	; 0x3f
 8002880:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002882:	2b02      	cmp	r3, #2
 8002884:	d121      	bne.n	80028ca <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	0151      	lsls	r1, r2, #5
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	440a      	add	r2, r1
 800289c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 f802 	bl	80068ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	2310      	movs	r3, #16
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	e066      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	333f      	adds	r3, #63	; 0x3f
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d127      	bne.n	800292e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	0151      	lsls	r1, r2, #5
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	440a      	add	r2, r1
 80028f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3360      	adds	r3, #96	; 0x60
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	b2d9      	uxtb	r1, r3
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	202c      	movs	r0, #44	; 0x2c
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	4413      	add	r3, r2
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f006 f984 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
 800292c:	e034      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	333f      	adds	r3, #63	; 0x3f
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d12a      	bne.n	8002998 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3360      	adds	r3, #96	; 0x60
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3354      	adds	r3, #84	; 0x54
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	f083 0301 	eor.w	r3, r3, #1
 8002968:	b2d8      	uxtb	r0, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3354      	adds	r3, #84	; 0x54
 8002978:	4602      	mov	r2, r0
 800297a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	b2d9      	uxtb	r1, r3
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	202c      	movs	r0, #44	; 0x2c
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	4413      	add	r3, r2
 800298c:	3360      	adds	r3, #96	; 0x60
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f006 f94e 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d12b      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3348      	adds	r3, #72	; 0x48
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	202c      	movs	r0, #44	; 0x2c
 80029b6:	fb00 f202 	mul.w	r2, r0, r2
 80029ba:	440a      	add	r2, r1
 80029bc:	3240      	adds	r2, #64	; 0x40
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 81be 	beq.w	8002d4a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3354      	adds	r3, #84	; 0x54
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f083 0301 	eor.w	r3, r3, #1
 80029e2:	b2d8      	uxtb	r0, r3
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3354      	adds	r3, #84	; 0x54
 80029f2:	4602      	mov	r2, r0
 80029f4:	701a      	strb	r2, [r3, #0]
}
 80029f6:	e1a8      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3354      	adds	r3, #84	; 0x54
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f083 0301 	eor.w	r3, r3, #1
 8002a0c:	b2d8      	uxtb	r0, r3
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3354      	adds	r3, #84	; 0x54
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	701a      	strb	r2, [r3, #0]
}
 8002a20:	e193      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	f040 8106 	bne.w	8002c46 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	0151      	lsls	r1, r2, #5
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	440a      	add	r2, r1
 8002a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a54:	f023 0302 	bic.w	r3, r3, #2
 8002a58:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3361      	adds	r3, #97	; 0x61
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d109      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3360      	adds	r3, #96	; 0x60
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e0c9      	b.n	8002c16 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3361      	adds	r3, #97	; 0x61
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d109      	bne.n	8002aaa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3360      	adds	r3, #96	; 0x60
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e0b5      	b.n	8002c16 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3361      	adds	r3, #97	; 0x61
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d009      	beq.n	8002ad2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3361      	adds	r3, #97	; 0x61
 8002acc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d150      	bne.n	8002b74 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	202c      	movs	r0, #44	; 0x2c
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	440b      	add	r3, r1
 8002af0:	335c      	adds	r3, #92	; 0x5c
 8002af2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	335c      	adds	r3, #92	; 0x5c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d912      	bls.n	8002b2e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	335c      	adds	r3, #92	; 0x5c
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3360      	adds	r3, #96	; 0x60
 8002b28:	2204      	movs	r2, #4
 8002b2a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b2c:	e073      	b.n	8002c16 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b56:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b5e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b72:	e050      	b.n	8002c16 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3361      	adds	r3, #97	; 0x61
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d122      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	2202      	movs	r2, #2
 8002b98:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bb0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e023      	b.n	8002c16 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3361      	adds	r3, #97	; 0x61
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b07      	cmp	r3, #7
 8002be0:	d119      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	335c      	adds	r3, #92	; 0x5c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	202c      	movs	r0, #44	; 0x2c
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	440b      	add	r3, r1
 8002c00:	335c      	adds	r3, #92	; 0x5c
 8002c02:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	2204      	movs	r2, #4
 8002c14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	461a      	mov	r2, r3
 8002c24:	2302      	movs	r3, #2
 8002c26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	b2d9      	uxtb	r1, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	202c      	movs	r0, #44	; 0x2c
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3360      	adds	r3, #96	; 0x60
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f005 fff8 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c44:	e081      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d176      	bne.n	8002d4a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	333f      	adds	r3, #63	; 0x3f
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d121      	bne.n	8002cb4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	335c      	adds	r3, #92	; 0x5c
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	0151      	lsls	r1, r2, #5
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	440a      	add	r2, r1
 8002c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fe04 	bl	80068ba <USB_HC_Halt>
 8002cb2:	e041      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	333f      	adds	r3, #63	; 0x3f
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	333f      	adds	r3, #63	; 0x3f
 8002cd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d12d      	bne.n	8002d38 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	335c      	adds	r3, #92	; 0x5c
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d120      	bne.n	8002d38 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3361      	adds	r3, #97	; 0x61
 8002d04:	2203      	movs	r2, #3
 8002d06:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	0151      	lsls	r1, r2, #5
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 fdc1 	bl	80068ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	2310      	movs	r3, #16
 8002d48:	6093      	str	r3, [r2, #8]
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d119      	bne.n	8002db6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2304      	movs	r3, #4
 8002d92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	0151      	lsls	r1, r2, #5
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	440a      	add	r2, r1
 8002daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dae:	f043 0302 	orr.w	r3, r3, #2
 8002db2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002db4:	e3ca      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d13e      	bne.n	8002e4a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2320      	movs	r3, #32
 8002ddc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	333d      	adds	r3, #61	; 0x3d
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f040 83ac 	bne.w	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	333d      	adds	r3, #61	; 0x3d
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	0151      	lsls	r1, r2, #5
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	440a      	add	r2, r1
 8002e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 fd39 	bl	80068ba <USB_HC_Halt>
}
 8002e48:	e380      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e60:	d122      	bne.n	8002ea8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	0151      	lsls	r1, r2, #5
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	440a      	add	r2, r1
 8002e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 fd14 	bl	80068ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea4:	6093      	str	r3, [r2, #8]
}
 8002ea6:	e351      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d150      	bne.n	8002f60 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	335c      	adds	r3, #92	; 0x5c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d111      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	333d      	adds	r3, #61	; 0x3d
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2340      	movs	r3, #64	; 0x40
 8002f08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	0151      	lsls	r1, r2, #5
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	440a      	add	r2, r1
 8002f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 fcc0 	bl	80068ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	461a      	mov	r2, r3
 8002f48:	2301      	movs	r3, #1
 8002f4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3361      	adds	r3, #97	; 0x61
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
}
 8002f5e:	e2f5      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	d13c      	bne.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3361      	adds	r3, #97	; 0x61
 8002f84:	2204      	movs	r2, #4
 8002f86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	333d      	adds	r3, #61	; 0x3d
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	335c      	adds	r3, #92	; 0x5c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	0151      	lsls	r1, r2, #5
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	440a      	add	r2, r1
 8002fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc6:	f043 0302 	orr.w	r3, r3, #2
 8002fca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fc6f 	bl	80068ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	6093      	str	r3, [r2, #8]
}
 8002fee:	e2ad      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b08      	cmp	r3, #8
 8003004:	d12a      	bne.n	800305c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	461a      	mov	r2, r3
 8003014:	2308      	movs	r3, #8
 8003016:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	0151      	lsls	r1, r2, #5
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	440a      	add	r2, r1
 800302e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fc39 	bl	80068ba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3361      	adds	r3, #97	; 0x61
 8003056:	2205      	movs	r2, #5
 8003058:	701a      	strb	r2, [r3, #0]
}
 800305a:	e277      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b10      	cmp	r3, #16
 8003070:	d150      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	335c      	adds	r3, #92	; 0x5c
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3361      	adds	r3, #97	; 0x61
 8003092:	2203      	movs	r2, #3
 8003094:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	333d      	adds	r3, #61	; 0x3d
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d112      	bne.n	80030d0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	333c      	adds	r3, #60	; 0x3c
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	333d      	adds	r3, #61	; 0x3d
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	0151      	lsls	r1, r2, #5
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	440a      	add	r2, r1
 80030e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fbdd 	bl	80068ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	461a      	mov	r2, r3
 800310e:	2310      	movs	r3, #16
 8003110:	6093      	str	r3, [r2, #8]
}
 8003112:	e21b      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b80      	cmp	r3, #128	; 0x80
 8003128:	d174      	bne.n	8003214 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d121      	bne.n	8003176 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	3361      	adds	r3, #97	; 0x61
 8003140:	2206      	movs	r2, #6
 8003142:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	0151      	lsls	r1, r2, #5
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	440a      	add	r2, r1
 800315a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fba3 	bl	80068ba <USB_HC_Halt>
 8003174:	e044      	b.n	8003200 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	335c      	adds	r3, #92	; 0x5c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	202c      	movs	r0, #44	; 0x2c
 800318e:	fb00 f303 	mul.w	r3, r0, r3
 8003192:	440b      	add	r3, r1
 8003194:	335c      	adds	r3, #92	; 0x5c
 8003196:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	335c      	adds	r3, #92	; 0x5c
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d920      	bls.n	80031ee <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	335c      	adds	r3, #92	; 0x5c
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3360      	adds	r3, #96	; 0x60
 80031cc:	2204      	movs	r2, #4
 80031ce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	b2d9      	uxtb	r1, r3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	202c      	movs	r0, #44	; 0x2c
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3360      	adds	r3, #96	; 0x60
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f005 fd24 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031ec:	e008      	b.n	8003200 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3360      	adds	r3, #96	; 0x60
 80031fc:	2202      	movs	r2, #2
 80031fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	461a      	mov	r2, r3
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	6093      	str	r3, [r2, #8]
}
 8003212:	e19b      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d134      	bne.n	8003296 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	0151      	lsls	r1, r2, #5
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	440a      	add	r2, r1
 8003242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003246:	f043 0302 	orr.w	r3, r3, #2
 800324a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fb2f 	bl	80068ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	461a      	mov	r2, r3
 800326a:	2310      	movs	r3, #16
 800326c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	461a      	mov	r2, r3
 800327c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003280:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3361      	adds	r3, #97	; 0x61
 8003290:	2208      	movs	r2, #8
 8003292:	701a      	strb	r2, [r3, #0]
}
 8003294:	e15a      	b.n	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	f040 814f 	bne.w	800354c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	0151      	lsls	r1, r2, #5
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	440a      	add	r2, r1
 80032c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c8:	f023 0302 	bic.w	r3, r3, #2
 80032cc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3361      	adds	r3, #97	; 0x61
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d17d      	bne.n	80033de <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3360      	adds	r3, #96	; 0x60
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	333f      	adds	r3, #63	; 0x3f
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d00a      	beq.n	800331e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	333f      	adds	r3, #63	; 0x3f
 8003316:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003318:	2b03      	cmp	r3, #3
 800331a:	f040 8100 	bne.w	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d113      	bne.n	800334e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3355      	adds	r3, #85	; 0x55
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	f083 0301 	eor.w	r3, r3, #1
 800333a:	b2d8      	uxtb	r0, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3355      	adds	r3, #85	; 0x55
 800334a:	4602      	mov	r2, r0
 800334c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	f040 80e3 	bne.w	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	334c      	adds	r3, #76	; 0x4c
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80d8 	beq.w	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	334c      	adds	r3, #76	; 0x4c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	202c      	movs	r0, #44	; 0x2c
 8003384:	fb00 f202 	mul.w	r2, r0, r2
 8003388:	440a      	add	r2, r1
 800338a:	3240      	adds	r2, #64	; 0x40
 800338c:	8812      	ldrh	r2, [r2, #0]
 800338e:	4413      	add	r3, r2
 8003390:	3b01      	subs	r3, #1
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	202c      	movs	r0, #44	; 0x2c
 8003398:	fb00 f202 	mul.w	r2, r0, r2
 800339c:	440a      	add	r2, r1
 800339e:	3240      	adds	r2, #64	; 0x40
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80b5 	beq.w	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3355      	adds	r3, #85	; 0x55
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	f083 0301 	eor.w	r3, r3, #1
 80033c8:	b2d8      	uxtb	r0, r3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3355      	adds	r3, #85	; 0x55
 80033d8:	4602      	mov	r2, r0
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e09f      	b.n	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3361      	adds	r3, #97	; 0x61
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d109      	bne.n	8003406 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3360      	adds	r3, #96	; 0x60
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e08b      	b.n	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3361      	adds	r3, #97	; 0x61
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d109      	bne.n	800342e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	3360      	adds	r3, #96	; 0x60
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e077      	b.n	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	3361      	adds	r3, #97	; 0x61
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b05      	cmp	r3, #5
 8003440:	d109      	bne.n	8003456 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	3360      	adds	r3, #96	; 0x60
 8003450:	2205      	movs	r2, #5
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e063      	b.n	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3361      	adds	r3, #97	; 0x61
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b06      	cmp	r3, #6
 8003468:	d009      	beq.n	800347e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	3361      	adds	r3, #97	; 0x61
 8003478:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800347a:	2b08      	cmp	r3, #8
 800347c:	d14f      	bne.n	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	335c      	adds	r3, #92	; 0x5c
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	202c      	movs	r0, #44	; 0x2c
 8003496:	fb00 f303 	mul.w	r3, r0, r3
 800349a:	440b      	add	r3, r1
 800349c:	335c      	adds	r3, #92	; 0x5c
 800349e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	335c      	adds	r3, #92	; 0x5c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d912      	bls.n	80034da <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	335c      	adds	r3, #92	; 0x5c
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3360      	adds	r3, #96	; 0x60
 80034d4:	2204      	movs	r2, #4
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e021      	b.n	800351e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3360      	adds	r3, #96	; 0x60
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003502:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800350a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	461a      	mov	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4413      	add	r3, r2
 8003526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352a:	461a      	mov	r2, r3
 800352c:	2302      	movs	r3, #2
 800352e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	b2d9      	uxtb	r1, r3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	202c      	movs	r0, #44	; 0x2c
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	4413      	add	r3, r2
 8003540:	3360      	adds	r3, #96	; 0x60
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f005 fb74 	bl	8008c34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800354c:	bf00      	nop
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	0c5b      	lsrs	r3, r3, #17
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003588:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d004      	beq.n	800359a <HCD_RXQLVL_IRQHandler+0x46>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b05      	cmp	r3, #5
 8003594:	f000 80a9 	beq.w	80036ea <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003598:	e0aa      	b.n	80036f0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a6 	beq.w	80036ee <HCD_RXQLVL_IRQHandler+0x19a>
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	3344      	adds	r3, #68	; 0x44
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 809b 	beq.w	80036ee <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	3350      	adds	r3, #80	; 0x50
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	441a      	add	r2, r3
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	202c      	movs	r0, #44	; 0x2c
 80035d2:	fb00 f303 	mul.w	r3, r0, r3
 80035d6:	440b      	add	r3, r1
 80035d8:	334c      	adds	r3, #76	; 0x4c
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d87a      	bhi.n	80036d6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3344      	adds	r3, #68	; 0x44
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	b292      	uxth	r2, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	f002 fcd7 	bl	8005fac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	3344      	adds	r3, #68	; 0x44
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	441a      	add	r2, r3
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	202c      	movs	r0, #44	; 0x2c
 8003618:	fb00 f303 	mul.w	r3, r0, r3
 800361c:	440b      	add	r3, r1
 800361e:	3344      	adds	r3, #68	; 0x44
 8003620:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	3350      	adds	r3, #80	; 0x50
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	441a      	add	r2, r3
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	202c      	movs	r0, #44	; 0x2c
 800363c:	fb00 f303 	mul.w	r3, r0, r3
 8003640:	440b      	add	r3, r1
 8003642:	3350      	adds	r3, #80	; 0x50
 8003644:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	0cdb      	lsrs	r3, r3, #19
 8003656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800365a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3340      	adds	r3, #64	; 0x40
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4293      	cmp	r3, r2
 8003672:	d13c      	bne.n	80036ee <HCD_RXQLVL_IRQHandler+0x19a>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d039      	beq.n	80036ee <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003690:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003698:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	461a      	mov	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	3354      	adds	r3, #84	; 0x54
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	f083 0301 	eor.w	r3, r3, #1
 80036c0:	b2d8      	uxtb	r0, r3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	3354      	adds	r3, #84	; 0x54
 80036d0:	4602      	mov	r2, r0
 80036d2:	701a      	strb	r2, [r3, #0]
      break;
 80036d4:	e00b      	b.n	80036ee <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	3360      	adds	r3, #96	; 0x60
 80036e4:	2204      	movs	r2, #4
 80036e6:	701a      	strb	r2, [r3, #0]
      break;
 80036e8:	e001      	b.n	80036ee <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80036ee:	bf00      	nop
  }
}
 80036f0:	bf00      	nop
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003724:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d10b      	bne.n	8003748 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d102      	bne.n	8003740 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f005 fa5e 	bl	8008bfc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d132      	bne.n	80037b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b04      	cmp	r3, #4
 8003762:	d126      	bne.n	80037b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d113      	bne.n	8003794 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003776:	d106      	bne.n	8003786 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2102      	movs	r1, #2
 800377e:	4618      	mov	r0, r3
 8003780:	f002 fd74 	bl	800626c <USB_InitFSLSPClkSel>
 8003784:	e011      	b.n	80037aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2101      	movs	r1, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f002 fd6d 	bl	800626c <USB_InitFSLSPClkSel>
 8003792:	e00a      	b.n	80037aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037a2:	461a      	mov	r2, r3
 80037a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f005 fa50 	bl	8008c50 <HAL_HCD_PortEnabled_Callback>
 80037b0:	e002      	b.n	80037b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f005 fa5a 	bl	8008c6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d103      	bne.n	80037ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f043 0320 	orr.w	r3, r3, #32
 80037c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6013      	str	r3, [r2, #0]
}
 80037d6:	bf00      	nop
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e12b      	b.n	8003a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd f9c8 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2224      	movs	r2, #36	; 0x24
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003844:	f001 f9fc 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 8003848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4a81      	ldr	r2, [pc, #516]	; (8003a54 <HAL_I2C_Init+0x274>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d807      	bhi.n	8003864 <HAL_I2C_Init+0x84>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a80      	ldr	r2, [pc, #512]	; (8003a58 <HAL_I2C_Init+0x278>)
 8003858:	4293      	cmp	r3, r2
 800385a:	bf94      	ite	ls
 800385c:	2301      	movls	r3, #1
 800385e:	2300      	movhi	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e006      	b.n	8003872 <HAL_I2C_Init+0x92>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a7d      	ldr	r2, [pc, #500]	; (8003a5c <HAL_I2C_Init+0x27c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	bf94      	ite	ls
 800386c:	2301      	movls	r3, #1
 800386e:	2300      	movhi	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0e7      	b.n	8003a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a78      	ldr	r2, [pc, #480]	; (8003a60 <HAL_I2C_Init+0x280>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0c9b      	lsrs	r3, r3, #18
 8003884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a6a      	ldr	r2, [pc, #424]	; (8003a54 <HAL_I2C_Init+0x274>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d802      	bhi.n	80038b4 <HAL_I2C_Init+0xd4>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3301      	adds	r3, #1
 80038b2:	e009      	b.n	80038c8 <HAL_I2C_Init+0xe8>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	4a69      	ldr	r2, [pc, #420]	; (8003a64 <HAL_I2C_Init+0x284>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	3301      	adds	r3, #1
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	495c      	ldr	r1, [pc, #368]	; (8003a54 <HAL_I2C_Init+0x274>)
 80038e4:	428b      	cmp	r3, r1
 80038e6:	d819      	bhi.n	800391c <HAL_I2C_Init+0x13c>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e59      	subs	r1, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f6:	1c59      	adds	r1, r3, #1
 80038f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038fc:	400b      	ands	r3, r1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_I2C_Init+0x138>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1e59      	subs	r1, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003910:	3301      	adds	r3, #1
 8003912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003916:	e051      	b.n	80039bc <HAL_I2C_Init+0x1dc>
 8003918:	2304      	movs	r3, #4
 800391a:	e04f      	b.n	80039bc <HAL_I2C_Init+0x1dc>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d111      	bne.n	8003948 <HAL_I2C_Init+0x168>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	440b      	add	r3, r1
 8003932:	fbb0 f3f3 	udiv	r3, r0, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e012      	b.n	800396e <HAL_I2C_Init+0x18e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Init+0x196>
 8003972:	2301      	movs	r3, #1
 8003974:	e022      	b.n	80039bc <HAL_I2C_Init+0x1dc>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10e      	bne.n	800399c <HAL_I2C_Init+0x1bc>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e58      	subs	r0, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	440b      	add	r3, r1
 800398c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800399a:	e00f      	b.n	80039bc <HAL_I2C_Init+0x1dc>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1e58      	subs	r0, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	0099      	lsls	r1, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	6809      	ldr	r1, [r1, #0]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69da      	ldr	r2, [r3, #28]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6911      	ldr	r1, [r2, #16]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68d2      	ldr	r2, [r2, #12]
 80039f6:	4311      	orrs	r1, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	000186a0 	.word	0x000186a0
 8003a58:	001e847f 	.word	0x001e847f
 8003a5c:	003d08ff 	.word	0x003d08ff
 8003a60:	431bde83 	.word	0x431bde83
 8003a64:	10624dd3 	.word	0x10624dd3

08003a68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e128      	b.n	8003ccc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a90      	ldr	r2, [pc, #576]	; (8003cd4 <HAL_I2S_Init+0x26c>)
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fd f8c9 	bl	8000c2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ab0:	f023 030f 	bic.w	r3, r3, #15
 8003ab4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2202      	movs	r2, #2
 8003abc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d060      	beq.n	8003b88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003ace:	2310      	movs	r3, #16
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e001      	b.n	8003ad8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ad4:	2320      	movs	r3, #32
 8003ad6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d802      	bhi.n	8003ae6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f001 f9a0 	bl	8004e2c <HAL_RCCEx_GetPeriphCLKFreq>
 8003aec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af6:	d125      	bne.n	8003b44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	461a      	mov	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	3305      	adds	r3, #5
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e01f      	b.n	8003b62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	3305      	adds	r3, #5
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e00e      	b.n	8003b62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	461a      	mov	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	3305      	adds	r3, #5
 8003b60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4a5c      	ldr	r2, [pc, #368]	; (8003cd8 <HAL_I2S_Init+0x270>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	08db      	lsrs	r3, r3, #3
 8003b6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d902      	bls.n	8003b9c <HAL_I2S_Init+0x134>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2bff      	cmp	r3, #255	; 0xff
 8003b9a:	d907      	bls.n	8003bac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f043 0210 	orr.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e08f      	b.n	8003ccc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	ea42 0103 	orr.w	r1, r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bca:	f023 030f 	bic.w	r3, r3, #15
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6851      	ldr	r1, [r2, #4]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6892      	ldr	r2, [r2, #8]
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68d2      	ldr	r2, [r2, #12]
 8003bdc:	4311      	orrs	r1, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6992      	ldr	r2, [r2, #24]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d161      	bne.n	8003cbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a38      	ldr	r2, [pc, #224]	; (8003cdc <HAL_I2S_Init+0x274>)
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a37      	ldr	r2, [pc, #220]	; (8003ce0 <HAL_I2S_Init+0x278>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <HAL_I2S_Init+0x1a4>
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_I2S_Init+0x27c>)
 8003c0a:	e001      	b.n	8003c10 <HAL_I2S_Init+0x1a8>
 8003c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	4932      	ldr	r1, [pc, #200]	; (8003ce0 <HAL_I2S_Init+0x278>)
 8003c18:	428a      	cmp	r2, r1
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2S_Init+0x1b8>
 8003c1c:	4a31      	ldr	r2, [pc, #196]	; (8003ce4 <HAL_I2S_Init+0x27c>)
 8003c1e:	e001      	b.n	8003c24 <HAL_I2S_Init+0x1bc>
 8003c20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c28:	f023 030f 	bic.w	r3, r3, #15
 8003c2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <HAL_I2S_Init+0x278>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_I2S_Init+0x1d4>
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_I2S_Init+0x27c>)
 8003c3a:	e001      	b.n	8003c40 <HAL_I2S_Init+0x1d8>
 8003c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c40:	2202      	movs	r2, #2
 8003c42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_I2S_Init+0x278>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2S_Init+0x1ea>
 8003c4e:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_I2S_Init+0x27c>)
 8003c50:	e001      	b.n	8003c56 <HAL_I2S_Init+0x1ee>
 8003c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c62:	d003      	beq.n	8003c6c <HAL_I2S_Init+0x204>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	e001      	b.n	8003c78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c82:	4313      	orrs	r3, r2
 8003c84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	897b      	ldrh	r3, [r7, #10]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ca4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <HAL_I2S_Init+0x278>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <HAL_I2S_Init+0x24c>
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_I2S_Init+0x27c>)
 8003cb2:	e001      	b.n	8003cb8 <HAL_I2S_Init+0x250>
 8003cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb8:	897a      	ldrh	r2, [r7, #10]
 8003cba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	08003ddf 	.word	0x08003ddf
 8003cd8:	cccccccd 	.word	0xcccccccd
 8003cdc:	08003ef5 	.word	0x08003ef5
 8003ce0:	40003800 	.word	0x40003800
 8003ce4:	40003400 	.word	0x40003400

08003ce8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10e      	bne.n	8003d78 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d68:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ffb8 	bl	8003ce8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	b292      	uxth	r2, r2
 8003d94:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10e      	bne.n	8003dd6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff93 	bl	8003cfc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d13a      	bne.n	8003e70 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d109      	bne.n	8003e18 <I2S_IRQHandler+0x3a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d102      	bne.n	8003e18 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffb4 	bl	8003d80 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d126      	bne.n	8003e70 <I2S_IRQHandler+0x92>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d11f      	bne.n	8003e70 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff ff50 	bl	8003d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d136      	bne.n	8003eea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d109      	bne.n	8003e9a <I2S_IRQHandler+0xbc>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d102      	bne.n	8003e9a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff45 	bl	8003d24 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d122      	bne.n	8003eea <I2S_IRQHandler+0x10c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d11b      	bne.n	8003eea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ec0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	f043 0204 	orr.w	r2, r3, #4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff13 	bl	8003d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4aa2      	ldr	r2, [pc, #648]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f0e:	4ba2      	ldr	r3, [pc, #648]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f10:	e001      	b.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a9b      	ldr	r2, [pc, #620]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f2c:	4b9a      	ldr	r3, [pc, #616]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f2e:	e001      	b.n	8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f40:	d004      	beq.n	8003f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 8099 	bne.w	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d107      	bne.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f925 	bl	80041b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9c8 	bl	8004310 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d13a      	bne.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d035      	beq.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a7e      	ldr	r2, [pc, #504]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f9e:	4b7e      	ldr	r3, [pc, #504]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fa0:	e001      	b.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003fa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4979      	ldr	r1, [pc, #484]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fae:	428b      	cmp	r3, r1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003fb2:	4b79      	ldr	r3, [pc, #484]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fb4:	e001      	b.n	8003fba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fbe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f043 0202 	orr.w	r2, r3, #2
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fe88 	bl	8003d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b08      	cmp	r3, #8
 8004008:	f040 80be 	bne.w	8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80b8 	beq.w	8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004026:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a59      	ldr	r2, [pc, #356]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004032:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004034:	e001      	b.n	800403a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004036:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4954      	ldr	r1, [pc, #336]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004042:	428b      	cmp	r3, r1
 8004044:	d101      	bne.n	800404a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004046:	4b54      	ldr	r3, [pc, #336]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004048:	e001      	b.n	800404e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800404a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800404e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004052:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f043 0204 	orr.w	r2, r3, #4
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fe4a 	bl	8003d10 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800407c:	e084      	b.n	8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d107      	bne.n	8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f8be 	bl	8004214 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d107      	bne.n	80040b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f8fd 	bl	80042ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d12f      	bne.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d02a      	beq.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2e      	ldr	r2, [pc, #184]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d101      	bne.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040e2:	e001      	b.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4929      	ldr	r1, [pc, #164]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040f0:	428b      	cmp	r3, r1
 80040f2:	d101      	bne.n	80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040f4:	4b28      	ldr	r3, [pc, #160]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040f6:	e001      	b.n	80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004100:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f043 0202 	orr.w	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fdfa 	bl	8003d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b08      	cmp	r3, #8
 8004124:	d131      	bne.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02c      	beq.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800413c:	e001      	b.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4912      	ldr	r1, [pc, #72]	; (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800414a:	428b      	cmp	r3, r1
 800414c:	d101      	bne.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004150:	e001      	b.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004156:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800415a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800416a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	f043 0204 	orr.w	r2, r3, #4
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fdc5 	bl	8003d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004186:	e000      	b.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004188:	bf00      	nop
}
 800418a:	bf00      	nop
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40003800 	.word	0x40003800
 8004198:	40003400 	.word	0x40003400

0800419c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	1c99      	adds	r1, r3, #2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6251      	str	r1, [r2, #36]	; 0x24
 80041c2:	881a      	ldrh	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ffc9 	bl	800419c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	1c99      	adds	r1, r3, #2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6251      	str	r1, [r2, #36]	; 0x24
 8004226:	8819      	ldrh	r1, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <I2SEx_TxISR_I2SExt+0x90>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <I2SEx_TxISR_I2SExt+0x22>
 8004232:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004234:	e001      	b.n	800423a <I2SEx_TxISR_I2SExt+0x26>
 8004236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800423a:	460a      	mov	r2, r1
 800423c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d121      	bne.n	800429a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <I2SEx_TxISR_I2SExt+0x90>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <I2SEx_TxISR_I2SExt+0x50>
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004262:	e001      	b.n	8004268 <I2SEx_TxISR_I2SExt+0x54>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	490d      	ldr	r1, [pc, #52]	; (80042a4 <I2SEx_TxISR_I2SExt+0x90>)
 8004270:	428b      	cmp	r3, r1
 8004272:	d101      	bne.n	8004278 <I2SEx_TxISR_I2SExt+0x64>
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004276:	e001      	b.n	800427c <I2SEx_TxISR_I2SExt+0x68>
 8004278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800427c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004280:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d106      	bne.n	800429a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff81 	bl	800419c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40003800 	.word	0x40003800
 80042a8:	40003400 	.word	0x40003400

080042ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68d8      	ldr	r0, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	1c99      	adds	r1, r3, #2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042c4:	b282      	uxth	r2, r0
 80042c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d113      	bne.n	8004308 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff4a 	bl	800419c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a20      	ldr	r2, [pc, #128]	; (80043a0 <I2SEx_RxISR_I2SExt+0x90>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <I2SEx_RxISR_I2SExt+0x16>
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004324:	e001      	b.n	800432a <I2SEx_RxISR_I2SExt+0x1a>
 8004326:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800432a:	68d8      	ldr	r0, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	1c99      	adds	r1, r3, #2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004336:	b282      	uxth	r2, r0
 8004338:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d121      	bne.n	8004396 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <I2SEx_RxISR_I2SExt+0x90>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d101      	bne.n	8004360 <I2SEx_RxISR_I2SExt+0x50>
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <I2SEx_RxISR_I2SExt+0x94>)
 800435e:	e001      	b.n	8004364 <I2SEx_RxISR_I2SExt+0x54>
 8004360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	490d      	ldr	r1, [pc, #52]	; (80043a0 <I2SEx_RxISR_I2SExt+0x90>)
 800436c:	428b      	cmp	r3, r1
 800436e:	d101      	bne.n	8004374 <I2SEx_RxISR_I2SExt+0x64>
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004372:	e001      	b.n	8004378 <I2SEx_RxISR_I2SExt+0x68>
 8004374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004378:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800437c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff03 	bl	800419c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40003800 	.word	0x40003800
 80043a4:	40003400 	.word	0x40003400

080043a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e264      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d075      	beq.n	80044b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c6:	4ba3      	ldr	r3, [pc, #652]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d00c      	beq.n	80043ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4ba0      	ldr	r3, [pc, #640]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d112      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b9d      	ldr	r3, [pc, #628]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b99      	ldr	r3, [pc, #612]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05b      	beq.n	80044b0 <HAL_RCC_OscConfig+0x108>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d157      	bne.n	80044b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e23f      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x74>
 800440e:	4b91      	ldr	r3, [pc, #580]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a90      	ldr	r2, [pc, #576]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x98>
 8004426:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a8a      	ldr	r2, [pc, #552]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b88      	ldr	r3, [pc, #544]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a87      	ldr	r2, [pc, #540]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 8004440:	4b84      	ldr	r3, [pc, #528]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a83      	ldr	r2, [pc, #524]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b81      	ldr	r3, [pc, #516]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a80      	ldr	r2, [pc, #512]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fc fe14 	bl	800108c <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7fc fe10 	bl	800108c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e204      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b76      	ldr	r3, [pc, #472]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xc0>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fc fe00 	bl	800108c <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004490:	f7fc fdfc 	bl	800108c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1f0      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b6c      	ldr	r3, [pc, #432]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0xe8>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044be:	4b65      	ldr	r3, [pc, #404]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b62      	ldr	r3, [pc, #392]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d6:	4b5f      	ldr	r3, [pc, #380]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b5c      	ldr	r3, [pc, #368]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1c4      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b56      	ldr	r3, [pc, #344]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4952      	ldr	r1, [pc, #328]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b4f      	ldr	r3, [pc, #316]	; (8004658 <HAL_RCC_OscConfig+0x2b0>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fc fdb5 	bl	800108c <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004526:	f7fc fdb1 	bl	800108c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1a5      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b46      	ldr	r3, [pc, #280]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b43      	ldr	r3, [pc, #268]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4940      	ldr	r1, [pc, #256]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b3f      	ldr	r3, [pc, #252]	; (8004658 <HAL_RCC_OscConfig+0x2b0>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fc fd94 	bl	800108c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004568:	f7fc fd90 	bl	800108c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e184      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d030      	beq.n	80045f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b30      	ldr	r3, [pc, #192]	; (800465c <HAL_RCC_OscConfig+0x2b4>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fc fd74 	bl	800108c <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fc fd70 	bl	800108c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e164      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x200>
 80045c6:	e015      	b.n	80045f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c8:	4b24      	ldr	r3, [pc, #144]	; (800465c <HAL_RCC_OscConfig+0x2b4>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fc fd5d 	bl	800108c <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fc fd59 	bl	800108c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e14d      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80045ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80a0 	beq.w	8004742 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a0e      	ldr	r2, [pc, #56]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_OscConfig+0x2b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d121      	bne.n	8004682 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_RCC_OscConfig+0x2b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a07      	ldr	r2, [pc, #28]	; (8004660 <HAL_RCC_OscConfig+0x2b8>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464a:	f7fc fd1f 	bl	800108c <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	e011      	b.n	8004676 <HAL_RCC_OscConfig+0x2ce>
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	42470000 	.word	0x42470000
 800465c:	42470e80 	.word	0x42470e80
 8004660:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fc fd12 	bl	800108c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e106      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b85      	ldr	r3, [pc, #532]	; (800488c <HAL_RCC_OscConfig+0x4e4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d106      	bne.n	8004698 <HAL_RCC_OscConfig+0x2f0>
 800468a:	4b81      	ldr	r3, [pc, #516]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a80      	ldr	r2, [pc, #512]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	e01c      	b.n	80046d2 <HAL_RCC_OscConfig+0x32a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b05      	cmp	r3, #5
 800469e:	d10c      	bne.n	80046ba <HAL_RCC_OscConfig+0x312>
 80046a0:	4b7b      	ldr	r3, [pc, #492]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a7a      	ldr	r2, [pc, #488]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046a6:	f043 0304 	orr.w	r3, r3, #4
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b78      	ldr	r3, [pc, #480]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a77      	ldr	r2, [pc, #476]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
 80046b8:	e00b      	b.n	80046d2 <HAL_RCC_OscConfig+0x32a>
 80046ba:	4b75      	ldr	r3, [pc, #468]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a74      	ldr	r2, [pc, #464]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
 80046c6:	4b72      	ldr	r3, [pc, #456]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a71      	ldr	r2, [pc, #452]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d015      	beq.n	8004706 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fc fcd7 	bl	800108c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fc fcd3 	bl	800108c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0c5      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	4b65      	ldr	r3, [pc, #404]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RCC_OscConfig+0x33a>
 8004704:	e014      	b.n	8004730 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004706:	f7fc fcc1 	bl	800108c <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fc fcbd 	bl	800108c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0af      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004724:	4b5a      	ldr	r3, [pc, #360]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ee      	bne.n	800470e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d105      	bne.n	8004742 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b56      	ldr	r3, [pc, #344]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4a55      	ldr	r2, [pc, #340]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 809b 	beq.w	8004882 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800474c:	4b50      	ldr	r3, [pc, #320]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d05c      	beq.n	8004812 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d141      	bne.n	80047e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004760:	4b4c      	ldr	r3, [pc, #304]	; (8004894 <HAL_RCC_OscConfig+0x4ec>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fc fc91 	bl	800108c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476e:	f7fc fc8d 	bl	800108c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e081      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004780:	4b43      	ldr	r3, [pc, #268]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f0      	bne.n	800476e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	019b      	lsls	r3, r3, #6
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	4937      	ldr	r1, [pc, #220]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b6:	4b37      	ldr	r3, [pc, #220]	; (8004894 <HAL_RCC_OscConfig+0x4ec>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fc fc66 	bl	800108c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fc fc62 	bl	800108c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e056      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b2e      	ldr	r3, [pc, #184]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x41c>
 80047e2:	e04e      	b.n	8004882 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <HAL_RCC_OscConfig+0x4ec>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fc fc4f 	bl	800108c <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fc fc4b 	bl	800108c <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e03f      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x44a>
 8004810:	e037      	b.n	8004882 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e032      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <HAL_RCC_OscConfig+0x4e8>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d028      	beq.n	800487e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d121      	bne.n	800487e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d11a      	bne.n	800487e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800484e:	4013      	ands	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004854:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004856:	4293      	cmp	r3, r2
 8004858:	d111      	bne.n	800487e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	3b01      	subs	r3, #1
 8004868:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d107      	bne.n	800487e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d001      	beq.n	8004882 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40007000 	.word	0x40007000
 8004890:	40023800 	.word	0x40023800
 8004894:	42470060 	.word	0x42470060

08004898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0cc      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b68      	ldr	r3, [pc, #416]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d90c      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b65      	ldr	r3, [pc, #404]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a58      	ldr	r2, [pc, #352]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a52      	ldr	r2, [pc, #328]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800490e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d044      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d119      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d003      	beq.n	8004956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004952:	2b03      	cmp	r3, #3
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b3f      	ldr	r3, [pc, #252]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e06f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e067      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004976:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4934      	ldr	r1, [pc, #208]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004988:	f7fc fb80 	bl	800108c <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004990:	f7fc fb7c 	bl	800108c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e04f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 020c 	and.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1eb      	bne.n	8004990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20c      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f821 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc fae0 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023c00 	.word	0x40023c00
 8004a54:	40023800 	.word	0x40023800
 8004a58:	080092a0 	.word	0x080092a0
 8004a5c:	20000000 	.word	0x20000000
 8004a60:	20000004 	.word	0x20000004

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	2300      	movs	r3, #0
 8004a76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7c:	4b67      	ldr	r3, [pc, #412]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d00d      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	f200 80bd 	bhi.w	8004c08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a96:	e0b7      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b61      	ldr	r3, [pc, #388]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a9a:	60bb      	str	r3, [r7, #8]
       break;
 8004a9c:	e0b7      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9e:	4b61      	ldr	r3, [pc, #388]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004aa0:	60bb      	str	r3, [r7, #8]
      break;
 8004aa2:	e0b4      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa4:	4b5d      	ldr	r3, [pc, #372]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aae:	4b5b      	ldr	r3, [pc, #364]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d04d      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b58      	ldr	r3, [pc, #352]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aca:	f04f 0100 	mov.w	r1, #0
 8004ace:	ea02 0800 	and.w	r8, r2, r0
 8004ad2:	ea03 0901 	and.w	r9, r3, r1
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	4649      	mov	r1, r9
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	014b      	lsls	r3, r1, #5
 8004ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ae8:	0142      	lsls	r2, r0, #5
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	ebb0 0008 	subs.w	r0, r0, r8
 8004af2:	eb61 0109 	sbc.w	r1, r1, r9
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	018b      	lsls	r3, r1, #6
 8004b00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b04:	0182      	lsls	r2, r0, #6
 8004b06:	1a12      	subs	r2, r2, r0
 8004b08:	eb63 0301 	sbc.w	r3, r3, r1
 8004b0c:	f04f 0000 	mov.w	r0, #0
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	00d9      	lsls	r1, r3, #3
 8004b16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b1a:	00d0      	lsls	r0, r2, #3
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	eb12 0208 	adds.w	r2, r2, r8
 8004b24:	eb43 0309 	adc.w	r3, r3, r9
 8004b28:	f04f 0000 	mov.w	r0, #0
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	0259      	lsls	r1, r3, #9
 8004b32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b36:	0250      	lsls	r0, r2, #9
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	f7fb fb3e 	bl	80001c8 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e04a      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b56:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	ea02 0400 	and.w	r4, r2, r0
 8004b6e:	ea03 0501 	and.w	r5, r3, r1
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	014b      	lsls	r3, r1, #5
 8004b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b84:	0142      	lsls	r2, r0, #5
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	1b00      	subs	r0, r0, r4
 8004b8c:	eb61 0105 	sbc.w	r1, r1, r5
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	018b      	lsls	r3, r1, #6
 8004b9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b9e:	0182      	lsls	r2, r0, #6
 8004ba0:	1a12      	subs	r2, r2, r0
 8004ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ba6:	f04f 0000 	mov.w	r0, #0
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	00d9      	lsls	r1, r3, #3
 8004bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bb4:	00d0      	lsls	r0, r2, #3
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	1912      	adds	r2, r2, r4
 8004bbc:	eb45 0303 	adc.w	r3, r5, r3
 8004bc0:	f04f 0000 	mov.w	r0, #0
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	0299      	lsls	r1, r3, #10
 8004bca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bce:	0290      	lsls	r0, r2, #10
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	f7fb faf2 	bl	80001c8 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4613      	mov	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	60bb      	str	r3, [r7, #8]
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c0a:	60bb      	str	r3, [r7, #8]
      break;
 8004c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	007a1200 	.word	0x007a1200

08004c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000000 	.word	0x20000000

08004c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c44:	f7ff fff0 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0a9b      	lsrs	r3, r3, #10
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4903      	ldr	r1, [pc, #12]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	080092b0 	.word	0x080092b0

08004c68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d035      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c90:	4b62      	ldr	r3, [pc, #392]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c96:	f7fc f9f9 	bl	800108c <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c9e:	f7fc f9f5 	bl	800108c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e0b0      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb0:	4b5b      	ldr	r3, [pc, #364]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f0      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	019a      	lsls	r2, r3, #6
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	071b      	lsls	r3, r3, #28
 8004cc8:	4955      	ldr	r1, [pc, #340]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cd0:	4b52      	ldr	r3, [pc, #328]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc f9d9 	bl	800108c <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cde:	f7fc f9d5 	bl	800108c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e090      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf0:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8083 	beq.w	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	4b44      	ldr	r3, [pc, #272]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	4a43      	ldr	r2, [pc, #268]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1a:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d26:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3e      	ldr	r2, [pc, #248]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d32:	f7fc f9ab 	bl	800108c <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d3a:	f7fc f9a7 	bl	800108c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e062      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d4c:	4b35      	ldr	r3, [pc, #212]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d58:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d02f      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d028      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d76:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d80:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d86:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d8c:	4a24      	ldr	r2, [pc, #144]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d92:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d114      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fc f975 	bl	800108c <HAL_GetTick>
 8004da2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fc f971 	bl	800108c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e02a      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	4b18      	ldr	r3, [pc, #96]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ee      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd4:	d10d      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dd6:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dea:	490d      	ldr	r1, [pc, #52]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]
 8004df0:	e005      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dfc:	6093      	str	r3, [r2, #8]
 8004dfe:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0a:	4905      	ldr	r1, [pc, #20]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	42470068 	.word	0x42470068
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40007000 	.word	0x40007000
 8004e28:	42470e40 	.word	0x42470e40

08004e2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d13e      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e4a:	4b23      	ldr	r3, [pc, #140]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d12f      	bne.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e60:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e62:	617b      	str	r3, [r7, #20]
          break;
 8004e64:	e02f      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e72:	d108      	bne.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e74:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7c:	4a18      	ldr	r2, [pc, #96]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	e007      	b.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e86:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9c:	099b      	lsrs	r3, r3, #6
 8004e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
 8004ea8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb0:	0f1b      	lsrs	r3, r3, #28
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]
          break;
 8004ebe:	e002      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
          break;
 8004ec4:	bf00      	nop
        }
      }
      break;
 8004ec6:	bf00      	nop
    }
  }
  return frequency;
 8004ec8:	697b      	ldr	r3, [r7, #20]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00bb8000 	.word	0x00bb8000
 8004ee0:	007a1200 	.word	0x007a1200
 8004ee4:	00f42400 	.word	0x00f42400

08004ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e07b      	b.n	8004ff2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d108      	bne.n	8004f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0a:	d009      	beq.n	8004f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	61da      	str	r2, [r3, #28]
 8004f12:	e005      	b.n	8004f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fb fef6 	bl	8000d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	ea42 0103 	orr.w	r1, r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	f003 0104 	and.w	r1, r3, #4
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f003 0210 	and.w	r2, r3, #16
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e041      	b.n	8005090 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fb fecb 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3304      	adds	r3, #4
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f000 fad9 	bl	80055f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e041      	b.n	800512e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f839 	bl	8005136 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f000 fa8a 	bl	80055f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <HAL_TIM_PWM_Start+0x24>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	e022      	b.n	80051b6 <HAL_TIM_PWM_Start+0x6a>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b04      	cmp	r3, #4
 8005174:	d109      	bne.n	800518a <HAL_TIM_PWM_Start+0x3e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	bf14      	ite	ne
 8005182:	2301      	movne	r3, #1
 8005184:	2300      	moveq	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	e015      	b.n	80051b6 <HAL_TIM_PWM_Start+0x6a>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d109      	bne.n	80051a4 <HAL_TIM_PWM_Start+0x58>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e008      	b.n	80051b6 <HAL_TIM_PWM_Start+0x6a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e07c      	b.n	80052b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_PWM_Start+0x82>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051cc:	e013      	b.n	80051f6 <HAL_TIM_PWM_Start+0xaa>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d104      	bne.n	80051de <HAL_TIM_PWM_Start+0x92>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051dc:	e00b      	b.n	80051f6 <HAL_TIM_PWM_Start+0xaa>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d104      	bne.n	80051ee <HAL_TIM_PWM_Start+0xa2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ec:	e003      	b.n	80051f6 <HAL_TIM_PWM_Start+0xaa>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2202      	movs	r2, #2
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2201      	movs	r2, #1
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fce0 	bl	8005bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <HAL_TIM_PWM_Start+0x174>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_TIM_PWM_Start+0xcc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2c      	ldr	r2, [pc, #176]	; (80052c4 <HAL_TIM_PWM_Start+0x178>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_TIM_PWM_Start+0xd0>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_TIM_PWM_Start+0xd2>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <HAL_TIM_PWM_Start+0x174>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d022      	beq.n	8005282 <HAL_TIM_PWM_Start+0x136>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d01d      	beq.n	8005282 <HAL_TIM_PWM_Start+0x136>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <HAL_TIM_PWM_Start+0x17c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d018      	beq.n	8005282 <HAL_TIM_PWM_Start+0x136>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1d      	ldr	r2, [pc, #116]	; (80052cc <HAL_TIM_PWM_Start+0x180>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_TIM_PWM_Start+0x136>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1c      	ldr	r2, [pc, #112]	; (80052d0 <HAL_TIM_PWM_Start+0x184>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_TIM_PWM_Start+0x136>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <HAL_TIM_PWM_Start+0x178>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_TIM_PWM_Start+0x136>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_TIM_PWM_Start+0x188>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_TIM_PWM_Start+0x136>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a16      	ldr	r2, [pc, #88]	; (80052d8 <HAL_TIM_PWM_Start+0x18c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d111      	bne.n	80052a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b06      	cmp	r3, #6
 8005292:	d010      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	e007      	b.n	80052b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40010400 	.word	0x40010400
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40001800 	.word	0x40001800

080052dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0ae      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	f200 809f 	bhi.w	8005448 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800530a:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005345 	.word	0x08005345
 8005314:	08005449 	.word	0x08005449
 8005318:	08005449 	.word	0x08005449
 800531c:	08005449 	.word	0x08005449
 8005320:	08005385 	.word	0x08005385
 8005324:	08005449 	.word	0x08005449
 8005328:	08005449 	.word	0x08005449
 800532c:	08005449 	.word	0x08005449
 8005330:	080053c7 	.word	0x080053c7
 8005334:	08005449 	.word	0x08005449
 8005338:	08005449 	.word	0x08005449
 800533c:	08005449 	.word	0x08005449
 8005340:	08005407 	.word	0x08005407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 f9f0 	bl	8005730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0208 	orr.w	r2, r2, #8
 800535e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6999      	ldr	r1, [r3, #24]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	619a      	str	r2, [r3, #24]
      break;
 8005382:	e064      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fa40 	bl	8005810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6999      	ldr	r1, [r3, #24]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	619a      	str	r2, [r3, #24]
      break;
 80053c4:	e043      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fa95 	bl	80058fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0208 	orr.w	r2, r2, #8
 80053e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0204 	bic.w	r2, r2, #4
 80053f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69d9      	ldr	r1, [r3, #28]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	61da      	str	r2, [r3, #28]
      break;
 8005404:	e023      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fae9 	bl	80059e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69d9      	ldr	r1, [r3, #28]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	021a      	lsls	r2, r3, #8
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	61da      	str	r2, [r3, #28]
      break;
 8005446:	e002      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	75fb      	strb	r3, [r7, #23]
      break;
 800544c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005456:	7dfb      	ldrb	r3, [r7, #23]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIM_ConfigClockSource+0x1c>
 8005478:	2302      	movs	r3, #2
 800547a:	e0b4      	b.n	80055e6 <HAL_TIM_ConfigClockSource+0x186>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800549a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b4:	d03e      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0xd4>
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ba:	f200 8087 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c2:	f000 8086 	beq.w	80055d2 <HAL_TIM_ConfigClockSource+0x172>
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	d87f      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b70      	cmp	r3, #112	; 0x70
 80054ce:	d01a      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0xa6>
 80054d0:	2b70      	cmp	r3, #112	; 0x70
 80054d2:	d87b      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b60      	cmp	r3, #96	; 0x60
 80054d6:	d050      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x11a>
 80054d8:	2b60      	cmp	r3, #96	; 0x60
 80054da:	d877      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b50      	cmp	r3, #80	; 0x50
 80054de:	d03c      	beq.n	800555a <HAL_TIM_ConfigClockSource+0xfa>
 80054e0:	2b50      	cmp	r3, #80	; 0x50
 80054e2:	d873      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d058      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x13a>
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d86f      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b30      	cmp	r3, #48	; 0x30
 80054ee:	d064      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x15a>
 80054f0:	2b30      	cmp	r3, #48	; 0x30
 80054f2:	d86b      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d060      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x15a>
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d867      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05c      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x15a>
 8005500:	2b10      	cmp	r3, #16
 8005502:	d05a      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x15a>
 8005504:	e062      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6899      	ldr	r1, [r3, #8]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f000 fb35 	bl	8005b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	609a      	str	r2, [r3, #8]
      break;
 8005532:	e04f      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f000 fb1e 	bl	8005b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005556:	609a      	str	r2, [r3, #8]
      break;
 8005558:	e03c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	461a      	mov	r2, r3
 8005568:	f000 fa92 	bl	8005a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2150      	movs	r1, #80	; 0x50
 8005572:	4618      	mov	r0, r3
 8005574:	f000 faeb 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 8005578:	e02c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	f000 fab1 	bl	8005aee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2160      	movs	r1, #96	; 0x60
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fadb 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 8005598:	e01c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 fa72 	bl	8005a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2140      	movs	r1, #64	; 0x40
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 facb 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 80055b8:	e00c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f000 fac2 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 80055ca:	e003      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      break;
 80055d0:	e000      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a40      	ldr	r2, [pc, #256]	; (8005704 <TIM_Base_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560e:	d00f      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3d      	ldr	r2, [pc, #244]	; (8005708 <TIM_Base_SetConfig+0x118>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3c      	ldr	r2, [pc, #240]	; (800570c <TIM_Base_SetConfig+0x11c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a3b      	ldr	r2, [pc, #236]	; (8005710 <TIM_Base_SetConfig+0x120>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a3a      	ldr	r2, [pc, #232]	; (8005714 <TIM_Base_SetConfig+0x124>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d108      	bne.n	8005642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2f      	ldr	r2, [pc, #188]	; (8005704 <TIM_Base_SetConfig+0x114>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02b      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005650:	d027      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <TIM_Base_SetConfig+0x118>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d023      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2b      	ldr	r2, [pc, #172]	; (800570c <TIM_Base_SetConfig+0x11c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01f      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2a      	ldr	r2, [pc, #168]	; (8005710 <TIM_Base_SetConfig+0x120>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01b      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a29      	ldr	r2, [pc, #164]	; (8005714 <TIM_Base_SetConfig+0x124>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d017      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a28      	ldr	r2, [pc, #160]	; (8005718 <TIM_Base_SetConfig+0x128>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a27      	ldr	r2, [pc, #156]	; (800571c <TIM_Base_SetConfig+0x12c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00f      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a26      	ldr	r2, [pc, #152]	; (8005720 <TIM_Base_SetConfig+0x130>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00b      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <TIM_Base_SetConfig+0x134>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d007      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a24      	ldr	r2, [pc, #144]	; (8005728 <TIM_Base_SetConfig+0x138>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d003      	beq.n	80056a2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a23      	ldr	r2, [pc, #140]	; (800572c <TIM_Base_SetConfig+0x13c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d108      	bne.n	80056b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <TIM_Base_SetConfig+0x114>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0xf8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a0c      	ldr	r2, [pc, #48]	; (8005714 <TIM_Base_SetConfig+0x124>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d103      	bne.n	80056f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	615a      	str	r2, [r3, #20]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40010400 	.word	0x40010400
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800
 8005724:	40001800 	.word	0x40001800
 8005728:	40001c00 	.word	0x40001c00
 800572c:	40002000 	.word	0x40002000

08005730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f023 0302 	bic.w	r3, r3, #2
 8005778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a20      	ldr	r2, [pc, #128]	; (8005808 <TIM_OC1_SetConfig+0xd8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_OC1_SetConfig+0x64>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a1f      	ldr	r2, [pc, #124]	; (800580c <TIM_OC1_SetConfig+0xdc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d10c      	bne.n	80057ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0308 	bic.w	r3, r3, #8
 800579a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 0304 	bic.w	r3, r3, #4
 80057ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <TIM_OC1_SetConfig+0xd8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC1_SetConfig+0x8e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <TIM_OC1_SetConfig+0xdc>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d111      	bne.n	80057e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	621a      	str	r2, [r3, #32]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40010000 	.word	0x40010000
 800580c:	40010400 	.word	0x40010400

08005810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f023 0210 	bic.w	r2, r3, #16
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 0320 	bic.w	r3, r3, #32
 800585a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <TIM_OC2_SetConfig+0xe4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_OC2_SetConfig+0x68>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <TIM_OC2_SetConfig+0xe8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d10d      	bne.n	8005894 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005892:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <TIM_OC2_SetConfig+0xe4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_OC2_SetConfig+0x94>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <TIM_OC2_SetConfig+0xe8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d113      	bne.n	80058cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400

080058fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a21      	ldr	r2, [pc, #132]	; (80059dc <TIM_OC3_SetConfig+0xe0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_OC3_SetConfig+0x66>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a20      	ldr	r2, [pc, #128]	; (80059e0 <TIM_OC3_SetConfig+0xe4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10d      	bne.n	800597e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800597c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a16      	ldr	r2, [pc, #88]	; (80059dc <TIM_OC3_SetConfig+0xe0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <TIM_OC3_SetConfig+0x92>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <TIM_OC3_SetConfig+0xe4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d113      	bne.n	80059b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40010400 	.word	0x40010400

080059e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <TIM_OC4_SetConfig+0xa4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC4_SetConfig+0x68>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <TIM_OC4_SetConfig+0xa8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d109      	bne.n	8005a60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	019b      	lsls	r3, r3, #6
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400

08005a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 030a 	bic.w	r3, r3, #10
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b087      	sub	sp, #28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0210 	bic.w	r2, r3, #16
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f043 0307 	orr.w	r3, r3, #7
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1a      	ldr	r2, [r3, #32]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e05a      	b.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d01d      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10c      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40000800 	.word	0x40000800
 8005cf8:	40000c00 	.word	0x40000c00
 8005cfc:	40010400 	.word	0x40010400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40001800 	.word	0x40001800

08005d08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d08:	b084      	sub	sp, #16
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	f107 001c 	add.w	r0, r7, #28
 8005d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d122      	bne.n	8005d66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d105      	bne.n	8005d5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f9a0 	bl	80060a0 <USB_CoreReset>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e01a      	b.n	8005d9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f994 	bl	80060a0 <USB_CoreReset>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d8e:	e005      	b.n	8005d9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d10b      	bne.n	8005dba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f043 0206 	orr.w	r2, r3, #6
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f043 0220 	orr.w	r2, r3, #32
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc6:	b004      	add	sp, #16
 8005dc8:	4770      	bx	lr

08005dca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f043 0201 	orr.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f023 0201 	bic.w	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	460b      	mov	r3, r1
 8005e18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d115      	bne.n	8005e5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f7fb f931 	bl	80010a4 <HAL_Delay>
      ms++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f91a 	bl	8006082 <USB_GetMode>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d01e      	beq.n	8005e92 <USB_SetCurrentMode+0x84>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b31      	cmp	r3, #49	; 0x31
 8005e58:	d9f0      	bls.n	8005e3c <USB_SetCurrentMode+0x2e>
 8005e5a:	e01a      	b.n	8005e92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d115      	bne.n	8005e8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f7fb f918 	bl	80010a4 <HAL_Delay>
      ms++;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f901 	bl	8006082 <USB_GetMode>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <USB_SetCurrentMode+0x84>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b31      	cmp	r3, #49	; 0x31
 8005e8a:	d9f0      	bls.n	8005e6e <USB_SetCurrentMode+0x60>
 8005e8c:	e001      	b.n	8005e92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e005      	b.n	8005e9e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b32      	cmp	r3, #50	; 0x32
 8005e96:	d101      	bne.n	8005e9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	019b      	lsls	r3, r3, #6
 8005eba:	f043 0220 	orr.w	r2, r3, #32
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	4a08      	ldr	r2, [pc, #32]	; (8005eec <USB_FlushTxFifo+0x44>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e006      	b.n	8005ee0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d0f1      	beq.n	8005ec2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	00030d40 	.word	0x00030d40

08005ef0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2210      	movs	r2, #16
 8005f00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <USB_FlushRxFifo+0x3c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e006      	b.n	8005f20 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d0f1      	beq.n	8005f02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	00030d40 	.word	0x00030d40

08005f30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b089      	sub	sp, #36	; 0x24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	460b      	mov	r3, r1
 8005f40:	71fb      	strb	r3, [r7, #7]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d123      	bne.n	8005f9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f56:	88bb      	ldrh	r3, [r7, #4]
 8005f58:	3303      	adds	r3, #3
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e018      	b.n	8005f96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	031a      	lsls	r2, r3, #12
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f70:	461a      	mov	r2, r3
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	3301      	adds	r3, #1
 8005f88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d3e2      	bcc.n	8005f64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3724      	adds	r7, #36	; 0x24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b08b      	sub	sp, #44	; 0x2c
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	e014      	b.n	8006002 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	3301      	adds	r3, #1
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	3301      	adds	r3, #1
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	6a3a      	ldr	r2, [r7, #32]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	429a      	cmp	r2, r3
 8006008:	d3e6      	bcc.n	8005fd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800600a:	8bfb      	ldrh	r3, [r7, #30]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01e      	beq.n	800604e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800601a:	461a      	mov	r2, r3
 800601c:	f107 0310 	add.w	r3, r7, #16
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
 8006030:	b2da      	uxtb	r2, r3
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	701a      	strb	r2, [r3, #0]
      i++;
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	3301      	adds	r3, #1
 800603a:	623b      	str	r3, [r7, #32]
      pDest++;
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	3301      	adds	r3, #1
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006042:	8bfb      	ldrh	r3, [r7, #30]
 8006044:	3b01      	subs	r3, #1
 8006046:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006048:	8bfb      	ldrh	r3, [r7, #30]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1ea      	bne.n	8006024 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006050:	4618      	mov	r0, r3
 8006052:	372c      	adds	r7, #44	; 0x2c
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006074:	68fb      	ldr	r3, [r7, #12]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f003 0301 	and.w	r3, r3, #1
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3301      	adds	r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4a13      	ldr	r2, [pc, #76]	; (8006100 <USB_CoreReset+0x60>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e01a      	b.n	80060f2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	daf3      	bge.n	80060ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f043 0201 	orr.w	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	4a09      	ldr	r2, [pc, #36]	; (8006100 <USB_CoreReset+0x60>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d901      	bls.n	80060e4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e006      	b.n	80060f2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d0f1      	beq.n	80060d4 <USB_CoreReset+0x34>

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	00030d40 	.word	0x00030d40

08006104 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006104:	b084      	sub	sp, #16
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	f107 001c 	add.w	r0, r7, #28
 8006112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006120:	461a      	mov	r2, r3
 8006122:	2300      	movs	r3, #0
 8006124:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d018      	beq.n	8006188 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	2b01      	cmp	r3, #1
 800615a:	d10a      	bne.n	8006172 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e014      	b.n	800619c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	e009      	b.n	800619c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006196:	f023 0304 	bic.w	r3, r3, #4
 800619a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800619c:	2110      	movs	r1, #16
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fe82 	bl	8005ea8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fea3 	bl	8005ef0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e015      	b.n	80061dc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061bc:	461a      	mov	r2, r3
 80061be:	f04f 33ff 	mov.w	r3, #4294967295
 80061c2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d0:	461a      	mov	r2, r3
 80061d2:	2300      	movs	r3, #0
 80061d4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3301      	adds	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3e5      	bcc.n	80061b0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a13      	ldr	r2, [pc, #76]	; (8006258 <USB_HostInit+0x154>)
 800620a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a13      	ldr	r2, [pc, #76]	; (800625c <USB_HostInit+0x158>)
 8006210:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006214:	e009      	b.n	800622a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2280      	movs	r2, #128	; 0x80
 800621a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a10      	ldr	r2, [pc, #64]	; (8006260 <USB_HostInit+0x15c>)
 8006220:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a0f      	ldr	r2, [pc, #60]	; (8006264 <USB_HostInit+0x160>)
 8006226:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	2b00      	cmp	r3, #0
 800622e:	d105      	bne.n	800623c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f043 0210 	orr.w	r2, r3, #16
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	4b09      	ldr	r3, [pc, #36]	; (8006268 <USB_HostInit+0x164>)
 8006242:	4313      	orrs	r3, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006254:	b004      	add	sp, #16
 8006256:	4770      	bx	lr
 8006258:	01000200 	.word	0x01000200
 800625c:	00e00300 	.word	0x00e00300
 8006260:	00600080 	.word	0x00600080
 8006264:	004000e0 	.word	0x004000e0
 8006268:	a3200008 	.word	0xa3200008

0800626c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800628a:	f023 0303 	bic.w	r3, r3, #3
 800628e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062a4:	4313      	orrs	r3, r2
 80062a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d107      	bne.n	80062be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b4:	461a      	mov	r2, r3
 80062b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062ba:	6053      	str	r3, [r2, #4]
 80062bc:	e009      	b.n	80062d2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d106      	bne.n	80062d2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ca:	461a      	mov	r2, r3
 80062cc:	f241 7370 	movw	r3, #6000	; 0x1770
 80062d0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006300:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800630a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006310:	2064      	movs	r0, #100	; 0x64
 8006312:	f7fa fec7 	bl	80010a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800631e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006322:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006324:	200a      	movs	r0, #10
 8006326:	f7fa febd 	bl	80010a4 <HAL_Delay>

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006358:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <USB_DriveVbus+0x44>
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d106      	bne.n	8006378 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006376:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006382:	d109      	bne.n	8006398 <USB_DriveVbus+0x64>
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006396:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	0c5b      	lsrs	r3, r3, #17
 80063c4:	f003 0303 	and.w	r3, r3, #3
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	b29b      	uxth	r3, r3
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	461a      	mov	r2, r3
 8006406:	4603      	mov	r3, r0
 8006408:	70fb      	strb	r3, [r7, #3]
 800640a:	460b      	mov	r3, r1
 800640c:	70bb      	strb	r3, [r7, #2]
 800640e:	4613      	mov	r3, r2
 8006410:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4413      	add	r3, r2
 8006422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006426:	461a      	mov	r2, r3
 8006428:	f04f 33ff 	mov.w	r3, #4294967295
 800642c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800642e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006432:	2b03      	cmp	r3, #3
 8006434:	d87e      	bhi.n	8006534 <USB_HC_Init+0x13c>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <USB_HC_Init+0x44>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	0800644d 	.word	0x0800644d
 8006440:	080064f7 	.word	0x080064f7
 8006444:	0800644d 	.word	0x0800644d
 8006448:	080064b9 	.word	0x080064b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	461a      	mov	r2, r3
 800645a:	f240 439d 	movw	r3, #1181	; 0x49d
 800645e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006460:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006464:	2b00      	cmp	r3, #0
 8006466:	da10      	bge.n	800648a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	440a      	add	r2, r1
 800647e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006486:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006488:	e057      	b.n	800653a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006492:	2b00      	cmp	r3, #0
 8006494:	d051      	beq.n	800653a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	78fa      	ldrb	r2, [r7, #3]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064b4:	60d3      	str	r3, [r2, #12]
      break;
 80064b6:	e040      	b.n	800653a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c4:	461a      	mov	r2, r3
 80064c6:	f240 639d 	movw	r3, #1693	; 0x69d
 80064ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	da34      	bge.n	800653e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80064f4:	e023      	b.n	800653e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	461a      	mov	r2, r3
 8006504:	f240 2325 	movw	r3, #549	; 0x225
 8006508:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800650a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da17      	bge.n	8006542 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	440a      	add	r2, r1
 8006528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006530:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006532:	e006      	b.n	8006542 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	77fb      	strb	r3, [r7, #31]
      break;
 8006538:	e004      	b.n	8006544 <USB_HC_Init+0x14c>
      break;
 800653a:	bf00      	nop
 800653c:	e002      	b.n	8006544 <USB_HC_Init+0x14c>
      break;
 800653e:	bf00      	nop
 8006540:	e000      	b.n	8006544 <USB_HC_Init+0x14c>
      break;
 8006542:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	2101      	movs	r1, #1
 8006554:	fa01 f303 	lsl.w	r3, r1, r3
 8006558:	6939      	ldr	r1, [r7, #16]
 800655a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800655e:	4313      	orrs	r3, r2
 8006560:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800656e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006572:	2b00      	cmp	r3, #0
 8006574:	da03      	bge.n	800657e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	e001      	b.n	8006582 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff ff0f 	bl	80063a6 <USB_GetHostSpeed>
 8006588:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800658a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800658e:	2b02      	cmp	r3, #2
 8006590:	d106      	bne.n	80065a0 <USB_HC_Init+0x1a8>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d003      	beq.n	80065a0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e001      	b.n	80065a4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065a4:	787b      	ldrb	r3, [r7, #1]
 80065a6:	059b      	lsls	r3, r3, #22
 80065a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065ac:	78bb      	ldrb	r3, [r7, #2]
 80065ae:	02db      	lsls	r3, r3, #11
 80065b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065ba:	049b      	lsls	r3, r3, #18
 80065bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	0159      	lsls	r1, r3, #5
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	440b      	add	r3, r1
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065e0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80065e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d10f      	bne.n	800660a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	78fa      	ldrb	r2, [r7, #3]
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006604:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006608:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800660a:	7ffb      	ldrb	r3, [r7, #31]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08c      	sub	sp, #48	; 0x30
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	4613      	mov	r3, r2
 8006620:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800662c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006630:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d02d      	beq.n	800669a <USB_HC_StartXfer+0x86>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	791b      	ldrb	r3, [r3, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d129      	bne.n	800669a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d117      	bne.n	800667c <USB_HC_StartXfer+0x68>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	79db      	ldrb	r3, [r3, #7]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <USB_HC_StartXfer+0x48>
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	79db      	ldrb	r3, [r3, #7]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d10f      	bne.n	800667c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	440a      	add	r2, r1
 8006672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <USB_HC_StartXfer+0x86>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	795b      	ldrb	r3, [r3, #5]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d107      	bne.n	800669a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	4619      	mov	r1, r3
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fa2f 	bl	8006af4 <USB_DoPing>
      return HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	e0f8      	b.n	800688c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	8912      	ldrh	r2, [r2, #8]
 80066aa:	4413      	add	r3, r2
 80066ac:	3b01      	subs	r3, #1
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	8912      	ldrh	r2, [r2, #8]
 80066b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80066b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066ba:	8b7b      	ldrh	r3, [r7, #26]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d90b      	bls.n	80066d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80066c0:	8b7b      	ldrh	r3, [r7, #26]
 80066c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	8912      	ldrh	r2, [r2, #8]
 80066ca:	fb02 f203 	mul.w	r2, r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	611a      	str	r2, [r3, #16]
 80066d2:	e001      	b.n	80066d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80066d4:	2301      	movs	r3, #1
 80066d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	78db      	ldrb	r3, [r3, #3]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	8912      	ldrh	r2, [r2, #8]
 80066e6:	fb02 f203 	mul.w	r2, r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	611a      	str	r2, [r3, #16]
 80066ee:	e003      	b.n	80066f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006700:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006702:	04d9      	lsls	r1, r3, #19
 8006704:	4b63      	ldr	r3, [pc, #396]	; (8006894 <USB_HC_StartXfer+0x280>)
 8006706:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006708:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	7a9b      	ldrb	r3, [r3, #10]
 800670e:	075b      	lsls	r3, r3, #29
 8006710:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006714:	69f9      	ldr	r1, [r7, #28]
 8006716:	0148      	lsls	r0, r1, #5
 8006718:	6a39      	ldr	r1, [r7, #32]
 800671a:	4401      	add	r1, r0
 800671c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006720:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006722:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	68d9      	ldr	r1, [r3, #12]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	460a      	mov	r2, r1
 800673c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	440a      	add	r2, r1
 800676c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006770:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006774:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	7e7b      	ldrb	r3, [r7, #25]
 8006786:	075b      	lsls	r3, r3, #29
 8006788:	69f9      	ldr	r1, [r7, #28]
 800678a:	0148      	lsls	r0, r1, #5
 800678c:	6a39      	ldr	r1, [r7, #32]
 800678e:	4401      	add	r1, r0
 8006790:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006794:	4313      	orrs	r3, r2
 8006796:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	78db      	ldrb	r3, [r3, #3]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	e003      	b.n	80067ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067de:	461a      	mov	r2, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e04e      	b.n	800688c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d149      	bne.n	800688a <USB_HC_StartXfer+0x276>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d045      	beq.n	800688a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	79db      	ldrb	r3, [r3, #7]
 8006802:	2b03      	cmp	r3, #3
 8006804:	d830      	bhi.n	8006868 <USB_HC_StartXfer+0x254>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USB_HC_StartXfer+0x1f8>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	0800681d 	.word	0x0800681d
 8006810:	08006841 	.word	0x08006841
 8006814:	0800681d 	.word	0x0800681d
 8006818:	08006841 	.word	0x08006841
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	3303      	adds	r3, #3
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006826:	8afa      	ldrh	r2, [r7, #22]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	b29b      	uxth	r3, r3
 800682e:	429a      	cmp	r2, r3
 8006830:	d91c      	bls.n	800686c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f043 0220 	orr.w	r2, r3, #32
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	619a      	str	r2, [r3, #24]
        }
        break;
 800683e:	e015      	b.n	800686c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	3303      	adds	r3, #3
 8006846:	089b      	lsrs	r3, r3, #2
 8006848:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800684a:	8afa      	ldrh	r2, [r7, #22]
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	b29b      	uxth	r3, r3
 8006856:	429a      	cmp	r2, r3
 8006858:	d90a      	bls.n	8006870 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	619a      	str	r2, [r3, #24]
        }
        break;
 8006866:	e003      	b.n	8006870 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006868:	bf00      	nop
 800686a:	e002      	b.n	8006872 <USB_HC_StartXfer+0x25e>
        break;
 800686c:	bf00      	nop
 800686e:	e000      	b.n	8006872 <USB_HC_StartXfer+0x25e>
        break;
 8006870:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	68d9      	ldr	r1, [r3, #12]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	785a      	ldrb	r2, [r3, #1]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	b29b      	uxth	r3, r3
 8006880:	2000      	movs	r0, #0
 8006882:	9000      	str	r0, [sp, #0]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff fb53 	bl	8005f30 <USB_WritePacket>
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3728      	adds	r7, #40	; 0x28
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	1ff80000 	.word	0x1ff80000

08006898 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	b29b      	uxth	r3, r3
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b089      	sub	sp, #36	; 0x24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	0c9b      	lsrs	r3, r3, #18
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	0fdb      	lsrs	r3, r3, #31
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b20      	cmp	r3, #32
 8006908:	d104      	bne.n	8006914 <USB_HC_Halt+0x5a>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	e0e8      	b.n	8006ae6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <USB_HC_Halt+0x66>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d173      	bne.n	8006a08 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	440a      	add	r2, r1
 8006936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800693a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800693e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 80cb 	bne.w	8006ae4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d143      	bne.n	80069e2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	440a      	add	r2, r1
 8006970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006978:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	440a      	add	r2, r1
 8006990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006994:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006998:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069b8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	3301      	adds	r3, #1
 80069be:	61fb      	str	r3, [r7, #28]
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c6:	d81d      	bhi.n	8006a04 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069de:	d0ec      	beq.n	80069ba <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069e0:	e080      	b.n	8006ae4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	0151      	lsls	r1, r2, #5
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	440a      	add	r2, r1
 80069f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a00:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a02:	e06f      	b.n	8006ae4 <USB_HC_Halt+0x22a>
            break;
 8006a04:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a06:	e06d      	b.n	8006ae4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a26:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d143      	bne.n	8006ac0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a56:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a76:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a96:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa4:	d81d      	bhi.n	8006ae2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006abc:	d0ec      	beq.n	8006a98 <USB_HC_Halt+0x1de>
 8006abe:	e011      	b.n	8006ae4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e000      	b.n	8006ae4 <USB_HC_Halt+0x22a>
          break;
 8006ae2:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3724      	adds	r7, #36	; 0x24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	04da      	lsls	r2, r3, #19
 8006b10:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <USB_DoPing+0x74>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b24:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b3c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b44:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b52:	461a      	mov	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	1ff80000 	.word	0x1ff80000

08006b6c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff f935 	bl	8005dec <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006b82:	2110      	movs	r1, #16
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff f98f 	bl	8005ea8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff f9b0 	bl	8005ef0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	e01f      	b.n	8006bd6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bbc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b0f      	cmp	r3, #15
 8006bda:	d9dc      	bls.n	8006b96 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	e034      	b.n	8006c4c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c00:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c08:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c16:	461a      	mov	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c28:	d80c      	bhi.n	8006c44 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c40:	d0ec      	beq.n	8006c1c <USB_StopHost+0xb0>
 8006c42:	e000      	b.n	8006c46 <USB_StopHost+0xda>
        break;
 8006c44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d9c7      	bls.n	8006be2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295
 8006c66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff f8ae 	bl	8005dca <USB_EnableGlobalInt>

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	b089      	sub	sp, #36	; 0x24
 8006c7c:	af04      	add	r7, sp, #16
 8006c7e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006c80:	2301      	movs	r3, #1
 8006c82:	2202      	movs	r2, #2
 8006c84:	2102      	movs	r1, #2
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fc66 	bl	8007558 <USBH_FindInterface>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2bff      	cmp	r3, #255	; 0xff
 8006c94:	d002      	beq.n	8006c9c <USBH_CDC_InterfaceInit+0x24>
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d901      	bls.n	8006ca0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e13d      	b.n	8006f1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fc3b 	bl	8007520 <USBH_SelectInterface>
 8006caa:	4603      	mov	r3, r0
 8006cac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e131      	b.n	8006f1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006cbe:	2050      	movs	r0, #80	; 0x50
 8006cc0:	f002 fa00 	bl	80090c4 <malloc>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e11f      	b.n	8006f1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006cdc:	2250      	movs	r2, #80	; 0x50
 8006cde:	2100      	movs	r1, #0
 8006ce0:	68b8      	ldr	r0, [r7, #8]
 8006ce2:	f002 f9ff 	bl	80090e4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	211a      	movs	r1, #26
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	b25b      	sxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da15      	bge.n	8006d2a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	211a      	movs	r1, #26
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
 8006d08:	4413      	add	r3, r2
 8006d0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	211a      	movs	r1, #26
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d24:	881a      	ldrh	r2, [r3, #0]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fe32 	bl	800899a <USBH_AllocPipe>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	7819      	ldrb	r1, [r3, #0]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	7858      	ldrb	r0, [r3, #1]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	8952      	ldrh	r2, [r2, #10]
 8006d56:	9202      	str	r2, [sp, #8]
 8006d58:	2203      	movs	r2, #3
 8006d5a:	9201      	str	r2, [sp, #4]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	4623      	mov	r3, r4
 8006d60:	4602      	mov	r2, r0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fdea 	bl	800893c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f002 f8f9 	bl	8008f68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006d76:	2300      	movs	r3, #0
 8006d78:	2200      	movs	r2, #0
 8006d7a:	210a      	movs	r1, #10
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fbeb 	bl	8007558 <USBH_FindInterface>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2bff      	cmp	r3, #255	; 0xff
 8006d8a:	d002      	beq.n	8006d92 <USBH_CDC_InterfaceInit+0x11a>
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d901      	bls.n	8006d96 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d92:	2302      	movs	r3, #2
 8006d94:	e0c2      	b.n	8006f1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	211a      	movs	r1, #26
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da16      	bge.n	8006ddc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	211a      	movs	r1, #26
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dbe:	781a      	ldrb	r2, [r3, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	211a      	movs	r1, #26
 8006dca:	fb01 f303 	mul.w	r3, r1, r3
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	835a      	strh	r2, [r3, #26]
 8006dda:	e015      	b.n	8006e08 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	211a      	movs	r1, #26
 8006de2:	fb01 f303 	mul.w	r3, r1, r3
 8006de6:	4413      	add	r3, r2
 8006de8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	211a      	movs	r1, #26
 8006df8:	fb01 f303 	mul.w	r3, r1, r3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e02:	881a      	ldrh	r2, [r3, #0]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	211a      	movs	r1, #26
 8006e0e:	fb01 f303 	mul.w	r3, r1, r3
 8006e12:	4413      	add	r3, r2
 8006e14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b25b      	sxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da16      	bge.n	8006e4e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	211a      	movs	r1, #26
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	211a      	movs	r1, #26
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e46:	881a      	ldrh	r2, [r3, #0]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	835a      	strh	r2, [r3, #26]
 8006e4c:	e015      	b.n	8006e7a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	211a      	movs	r1, #26
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	4413      	add	r3, r2
 8006e5a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e5e:	781a      	ldrb	r2, [r3, #0]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	211a      	movs	r1, #26
 8006e6a:	fb01 f303 	mul.w	r3, r1, r3
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e74:	881a      	ldrh	r2, [r3, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	7b9b      	ldrb	r3, [r3, #14]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 fd8a 	bl	800899a <USBH_AllocPipe>
 8006e86:	4603      	mov	r3, r0
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	7bdb      	ldrb	r3, [r3, #15]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fd80 	bl	800899a <USBH_AllocPipe>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	7b59      	ldrb	r1, [r3, #13]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	7b98      	ldrb	r0, [r3, #14]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	8b12      	ldrh	r2, [r2, #24]
 8006eba:	9202      	str	r2, [sp, #8]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	9201      	str	r2, [sp, #4]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fd38 	bl	800893c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	7b19      	ldrb	r1, [r3, #12]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	7bd8      	ldrb	r0, [r3, #15]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	8b52      	ldrh	r2, [r2, #26]
 8006ee4:	9202      	str	r2, [sp, #8]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	9201      	str	r2, [sp, #4]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	4623      	mov	r3, r4
 8006eee:	4602      	mov	r2, r0
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fd23 	bl	800893c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	7b5b      	ldrb	r3, [r3, #13]
 8006f02:	2200      	movs	r2, #0
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f002 f82e 	bl	8008f68 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	7b1b      	ldrb	r3, [r3, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f002 f827 	bl	8008f68 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd90      	pop	{r4, r7, pc}

08006f24 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00e      	beq.n	8006f5c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 fd18 	bl	800897a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fd43 	bl	80089dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	7b1b      	ldrb	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00e      	beq.n	8006f82 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	7b1b      	ldrb	r3, [r3, #12]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fd05 	bl	800897a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	7b1b      	ldrb	r3, [r3, #12]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 fd30 	bl	80089dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	7b5b      	ldrb	r3, [r3, #13]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	7b5b      	ldrb	r3, [r3, #13]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 fcf2 	bl	800897a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	7b5b      	ldrb	r3, [r3, #13]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fd1d 	bl	80089dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 f889 	bl	80090d4 <free>
    phost->pActiveClass->pData = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc8:	2200      	movs	r2, #0
 8006fca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3340      	adds	r3, #64	; 0x40
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f8b1 	bl	8007156 <GetLineCoding>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d105      	bne.n	800700a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007004:	2102      	movs	r1, #2
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800700a:	7afb      	ldrb	r3, [r7, #11]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800701c:	2301      	movs	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007034:	2b04      	cmp	r3, #4
 8007036:	d877      	bhi.n	8007128 <USBH_CDC_Process+0x114>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <USBH_CDC_Process+0x2c>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007055 	.word	0x08007055
 8007044:	0800705b 	.word	0x0800705b
 8007048:	0800708b 	.word	0x0800708b
 800704c:	080070ff 	.word	0x080070ff
 8007050:	0800710d 	.word	0x0800710d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73fb      	strb	r3, [r7, #15]
      break;
 8007058:	e06d      	b.n	8007136 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f897 	bl	8007194 <SetLineCoding>
 8007066:	4603      	mov	r3, r0
 8007068:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007078:	e058      	b.n	800712c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d055      	beq.n	800712c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2204      	movs	r2, #4
 8007084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007088:	e050      	b.n	800712c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3340      	adds	r3, #64	; 0x40
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f860 	bl	8007156 <GetLineCoding>
 8007096:	4603      	mov	r3, r0
 8007098:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d126      	bne.n	80070ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b2:	791b      	ldrb	r3, [r3, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d13b      	bne.n	8007130 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d133      	bne.n	8007130 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d12b      	bne.n	8007130 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d124      	bne.n	8007130 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f958 	bl	800739c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070ec:	e020      	b.n	8007130 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d01d      	beq.n	8007130 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80070fc:	e018      	b.n	8007130 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f867 	bl	80071d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f8da 	bl	80072be <CDC_ProcessReception>
      break;
 800710a:	e014      	b.n	8007136 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800710c:	2100      	movs	r1, #0
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 ffe3 	bl	80080da <USBH_ClrFeature>
 8007114:	4603      	mov	r3, r0
 8007116:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007126:	e005      	b.n	8007134 <USBH_CDC_Process+0x120>

    default:
      break;
 8007128:	bf00      	nop
 800712a:	e004      	b.n	8007136 <USBH_CDC_Process+0x122>
      break;
 800712c:	bf00      	nop
 800712e:	e002      	b.n	8007136 <USBH_CDC_Process+0x122>
      break;
 8007130:	bf00      	nop
 8007132:	e000      	b.n	8007136 <USBH_CDC_Process+0x122>
      break;
 8007134:	bf00      	nop

  }

  return status;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	22a1      	movs	r2, #161	; 0xa1
 8007164:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2221      	movs	r2, #33	; 0x21
 800716a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2207      	movs	r2, #7
 800717c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2207      	movs	r2, #7
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f988 	bl	800849a <USBH_CtlReq>
 800718a:	4603      	mov	r3, r0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2221      	movs	r2, #33	; 0x21
 80071a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2207      	movs	r2, #7
 80071ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2207      	movs	r2, #7
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 f969 	bl	800849a <USBH_CtlReq>
 80071c8:	4603      	mov	r3, r0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af02      	add	r7, sp, #8
 80071d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d002      	beq.n	80071f8 <CDC_ProcessTransmission+0x26>
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d023      	beq.n	800723e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80071f6:	e05e      	b.n	80072b6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	8b12      	ldrh	r2, [r2, #24]
 8007200:	4293      	cmp	r3, r2
 8007202:	d90b      	bls.n	800721c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	69d9      	ldr	r1, [r3, #28]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8b1a      	ldrh	r2, [r3, #24]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	7b5b      	ldrb	r3, [r3, #13]
 8007210:	2001      	movs	r0, #1
 8007212:	9000      	str	r0, [sp, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fb4e 	bl	80088b6 <USBH_BulkSendData>
 800721a:	e00b      	b.n	8007234 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	7b5b      	ldrb	r3, [r3, #13]
 800722a:	2001      	movs	r0, #1
 800722c:	9000      	str	r0, [sp, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fb41 	bl	80088b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800723c:	e03b      	b.n	80072b6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	7b5b      	ldrb	r3, [r3, #13]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fe65 	bl	8008f14 <USBH_LL_GetURBState>
 800724a:	4603      	mov	r3, r0
 800724c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d128      	bne.n	80072a6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	8b12      	ldrh	r2, [r2, #24]
 800725c:	4293      	cmp	r3, r2
 800725e:	d90e      	bls.n	800727e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	8b12      	ldrh	r2, [r2, #24]
 8007268:	1a9a      	subs	r2, r3, r2
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	8b12      	ldrh	r2, [r2, #24]
 8007276:	441a      	add	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	61da      	str	r2, [r3, #28]
 800727c:	e002      	b.n	8007284 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007294:	e00e      	b.n	80072b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f868 	bl	8007374 <USBH_CDC_TransmitCallback>
      break;
 80072a4:	e006      	b.n	80072b4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d103      	bne.n	80072b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072b4:	bf00      	nop
  }
}
 80072b6:	bf00      	nop
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b086      	sub	sp, #24
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072d0:	2300      	movs	r3, #0
 80072d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d002      	beq.n	80072e4 <CDC_ProcessReception+0x26>
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d00e      	beq.n	8007300 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80072e2:	e043      	b.n	800736c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	6a19      	ldr	r1, [r3, #32]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	8b5a      	ldrh	r2, [r3, #26]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	7b1b      	ldrb	r3, [r3, #12]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fb05 	bl	8008900 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2204      	movs	r2, #4
 80072fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80072fe:	e035      	b.n	800736c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	7b1b      	ldrb	r3, [r3, #12]
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 fe04 	bl	8008f14 <USBH_LL_GetURBState>
 800730c:	4603      	mov	r3, r0
 800730e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007310:	7cfb      	ldrb	r3, [r7, #19]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d129      	bne.n	800736a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	7b1b      	ldrb	r3, [r3, #12]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fd67 	bl	8008df0 <USBH_LL_GetLastXferSize>
 8007322:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	429a      	cmp	r2, r3
 800732c:	d016      	beq.n	800735c <CDC_ProcessReception+0x9e>
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	8b5b      	ldrh	r3, [r3, #26]
 8007332:	461a      	mov	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4293      	cmp	r3, r2
 8007338:	d910      	bls.n	800735c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad2      	subs	r2, r2, r3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	6a1a      	ldr	r2, [r3, #32]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	441a      	add	r2, r3
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2203      	movs	r2, #3
 8007356:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800735a:	e006      	b.n	800736a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f80f 	bl	8007388 <USBH_CDC_ReceiveCallback>
      break;
 800736a:	bf00      	nop
  }
}
 800736c:	bf00      	nop
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073c4:	2302      	movs	r3, #2
 80073c6:	e029      	b.n	800741c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	79fa      	ldrb	r2, [r7, #7]
 80073cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f81f 	bl	8007424 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f001 fc37 	bl	8008c88 <USBH_LL_Init>

  return USBH_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e009      	b.n	800744a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	33e0      	adds	r3, #224	; 0xe0
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	2200      	movs	r2, #0
 8007442:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3301      	adds	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b0e      	cmp	r3, #14
 800744e:	d9f2      	bls.n	8007436 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	e009      	b.n	800746a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3301      	adds	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007470:	d3f1      	bcc.n	8007456 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2240      	movs	r2, #64	; 0x40
 8007496:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d016      	beq.n	800750e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10e      	bne.n	8007508 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074f0:	1c59      	adds	r1, r3, #1
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	33de      	adds	r3, #222	; 0xde
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
 8007506:	e004      	b.n	8007512 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007508:	2302      	movs	r3, #2
 800750a:	73fb      	strb	r3, [r7, #15]
 800750c:	e001      	b.n	8007512 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800750e:	2302      	movs	r3, #2
 8007510:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	429a      	cmp	r2, r3
 800753a:	d204      	bcs.n	8007546 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007544:	e001      	b.n	800754a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	461a      	mov	r2, r3
 8007566:	4603      	mov	r3, r0
 8007568:	70fb      	strb	r3, [r7, #3]
 800756a:	460b      	mov	r3, r1
 800756c:	70bb      	strb	r3, [r7, #2]
 800756e:	4613      	mov	r3, r2
 8007570:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007580:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007582:	e025      	b.n	80075d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	221a      	movs	r2, #26
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	3308      	adds	r3, #8
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	3302      	adds	r3, #2
 8007594:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	795b      	ldrb	r3, [r3, #5]
 800759a:	78fa      	ldrb	r2, [r7, #3]
 800759c:	429a      	cmp	r2, r3
 800759e:	d002      	beq.n	80075a6 <USBH_FindInterface+0x4e>
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	2bff      	cmp	r3, #255	; 0xff
 80075a4:	d111      	bne.n	80075ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80075aa:	78ba      	ldrb	r2, [r7, #2]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d002      	beq.n	80075b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075b0:	78bb      	ldrb	r3, [r7, #2]
 80075b2:	2bff      	cmp	r3, #255	; 0xff
 80075b4:	d109      	bne.n	80075ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075ba:	787a      	ldrb	r2, [r7, #1]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d002      	beq.n	80075c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075c0:	787b      	ldrb	r3, [r7, #1]
 80075c2:	2bff      	cmp	r3, #255	; 0xff
 80075c4:	d101      	bne.n	80075ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	e006      	b.n	80075d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	3301      	adds	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d9d6      	bls.n	8007584 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80075d6:	23ff      	movs	r3, #255	; 0xff
}
 80075d8:	4618      	mov	r0, r3
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 fb87 	bl	8008d00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80075f2:	2101      	movs	r1, #1
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fca0 	bl	8008f3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af04      	add	r7, sp, #16
 800760a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800760c:	2302      	movs	r3, #2
 800760e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	d102      	bne.n	8007626 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2203      	movs	r2, #3
 8007624:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b0b      	cmp	r3, #11
 800762e:	f200 81b3 	bhi.w	8007998 <USBH_Process+0x394>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <USBH_Process+0x34>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007669 	.word	0x08007669
 800763c:	0800769b 	.word	0x0800769b
 8007640:	08007703 	.word	0x08007703
 8007644:	08007933 	.word	0x08007933
 8007648:	08007999 	.word	0x08007999
 800764c:	080077a7 	.word	0x080077a7
 8007650:	080078d9 	.word	0x080078d9
 8007654:	080077dd 	.word	0x080077dd
 8007658:	080077fd 	.word	0x080077fd
 800765c:	0800781d 	.word	0x0800781d
 8007660:	0800784b 	.word	0x0800784b
 8007664:	0800791b 	.word	0x0800791b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8193 	beq.w	800799c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800767c:	20c8      	movs	r0, #200	; 0xc8
 800767e:	f001 fca3 	bl	8008fc8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fb99 	bl	8008dba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007698:	e180      	b.n	800799c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d107      	bne.n	80076b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076b2:	e182      	b.n	80079ba <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076be:	d914      	bls.n	80076ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076c6:	3301      	adds	r3, #1
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d903      	bls.n	80076e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	220d      	movs	r2, #13
 80076de:	701a      	strb	r2, [r3, #0]
      break;
 80076e0:	e16b      	b.n	80079ba <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
      break;
 80076e8:	e167      	b.n	80079ba <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076f0:	f103 020a 	add.w	r2, r3, #10
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80076fa:	200a      	movs	r0, #10
 80076fc:	f001 fc64 	bl	8008fc8 <USBH_Delay>
      break;
 8007700:	e15b      	b.n	80079ba <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007712:	2104      	movs	r1, #4
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007718:	2064      	movs	r0, #100	; 0x64
 800771a:	f001 fc55 	bl	8008fc8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fb24 	bl	8008d6c <USBH_LL_GetSpeed>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2205      	movs	r2, #5
 8007732:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007734:	2100      	movs	r1, #0
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 f92f 	bl	800899a <USBH_AllocPipe>
 800773c:	4603      	mov	r3, r0
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007744:	2180      	movs	r1, #128	; 0x80
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 f927 	bl	800899a <USBH_AllocPipe>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	7919      	ldrb	r1, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007768:	b292      	uxth	r2, r2
 800776a:	9202      	str	r2, [sp, #8]
 800776c:	2200      	movs	r2, #0
 800776e:	9201      	str	r2, [sp, #4]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	4603      	mov	r3, r0
 8007774:	2280      	movs	r2, #128	; 0x80
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 f8e0 	bl	800893c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	7959      	ldrb	r1, [r3, #5]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007790:	b292      	uxth	r2, r2
 8007792:	9202      	str	r2, [sp, #8]
 8007794:	2200      	movs	r2, #0
 8007796:	9201      	str	r2, [sp, #4]
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4603      	mov	r3, r0
 800779c:	2200      	movs	r2, #0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 f8cc 	bl	800893c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077a4:	e109      	b.n	80079ba <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f90c 	bl	80079c4 <USBH_HandleEnum>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 80f3 	bne.w	80079a0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d103      	bne.n	80077d4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2208      	movs	r2, #8
 80077d0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80077d2:	e0e5      	b.n	80079a0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2207      	movs	r2, #7
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	e0e1      	b.n	80079a0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80de 	beq.w	80079a4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ee:	2101      	movs	r1, #1
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2208      	movs	r2, #8
 80077f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80077fa:	e0d3      	b.n	80079a4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007802:	b29b      	uxth	r3, r3
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fc20 	bl	800804c <USBH_SetCfg>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	f040 80ca 	bne.w	80079a8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2209      	movs	r2, #9
 8007818:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800781a:	e0c5      	b.n	80079a8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007822:	f003 0320 	and.w	r3, r3, #32
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800782a:	2101      	movs	r1, #1
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fc30 	bl	8008092 <USBH_SetFeature>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 80b9 	bne.w	80079ac <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	220a      	movs	r2, #10
 800783e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007840:	e0b4      	b.n	80079ac <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	220a      	movs	r2, #10
 8007846:	701a      	strb	r2, [r3, #0]
      break;
 8007848:	e0b0      	b.n	80079ac <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 80ad 	beq.w	80079b0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
 8007862:	e016      	b.n	8007892 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007864:	7bfa      	ldrb	r2, [r7, #15]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	32de      	adds	r2, #222	; 0xde
 800786a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786e:	791a      	ldrb	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007876:	429a      	cmp	r2, r3
 8007878:	d108      	bne.n	800788c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800787a:	7bfa      	ldrb	r2, [r7, #15]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	32de      	adds	r2, #222	; 0xde
 8007880:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800788a:	e005      	b.n	8007898 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	3301      	adds	r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0e5      	beq.n	8007864 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d016      	beq.n	80078d0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2206      	movs	r2, #6
 80078b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078c0:	2103      	movs	r1, #3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078c6:	e073      	b.n	80079b0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	220d      	movs	r2, #13
 80078cc:	701a      	strb	r2, [r3, #0]
      break;
 80078ce:	e06f      	b.n	80079b0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	220d      	movs	r2, #13
 80078d4:	701a      	strb	r2, [r3, #0]
      break;
 80078d6:	e06b      	b.n	80079b0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d017      	beq.n	8007912 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	220b      	movs	r2, #11
 80078fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007900:	e058      	b.n	80079b4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d154      	bne.n	80079b4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	220d      	movs	r2, #13
 800790e:	701a      	strb	r2, [r3, #0]
      break;
 8007910:	e050      	b.n	80079b4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	220d      	movs	r2, #13
 8007916:	701a      	strb	r2, [r3, #0]
      break;
 8007918:	e04c      	b.n	80079b4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d049      	beq.n	80079b8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
      }
      break;
 8007930:	e042      	b.n	80079b8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff fd72 	bl	8007424 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d009      	beq.n	800795e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800796e:	2105      	movs	r1, #5
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	d107      	bne.n	8007990 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fe2b 	bl	80075e4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800798e:	e014      	b.n	80079ba <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 f9b5 	bl	8008d00 <USBH_LL_Start>
      break;
 8007996:	e010      	b.n	80079ba <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007998:	bf00      	nop
 800799a:	e00e      	b.n	80079ba <USBH_Process+0x3b6>
      break;
 800799c:	bf00      	nop
 800799e:	e00c      	b.n	80079ba <USBH_Process+0x3b6>
      break;
 80079a0:	bf00      	nop
 80079a2:	e00a      	b.n	80079ba <USBH_Process+0x3b6>
    break;
 80079a4:	bf00      	nop
 80079a6:	e008      	b.n	80079ba <USBH_Process+0x3b6>
      break;
 80079a8:	bf00      	nop
 80079aa:	e006      	b.n	80079ba <USBH_Process+0x3b6>
      break;
 80079ac:	bf00      	nop
 80079ae:	e004      	b.n	80079ba <USBH_Process+0x3b6>
      break;
 80079b0:	bf00      	nop
 80079b2:	e002      	b.n	80079ba <USBH_Process+0x3b6>
      break;
 80079b4:	bf00      	nop
 80079b6:	e000      	b.n	80079ba <USBH_Process+0x3b6>
      break;
 80079b8:	bf00      	nop
  }
  return USBH_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af04      	add	r7, sp, #16
 80079ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079cc:	2301      	movs	r3, #1
 80079ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	2b07      	cmp	r3, #7
 80079da:	f200 81c1 	bhi.w	8007d60 <USBH_HandleEnum+0x39c>
 80079de:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <USBH_HandleEnum+0x20>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	08007a05 	.word	0x08007a05
 80079e8:	08007ac3 	.word	0x08007ac3
 80079ec:	08007b2d 	.word	0x08007b2d
 80079f0:	08007bbb 	.word	0x08007bbb
 80079f4:	08007c25 	.word	0x08007c25
 80079f8:	08007c95 	.word	0x08007c95
 80079fc:	08007cdb 	.word	0x08007cdb
 8007a00:	08007d21 	.word	0x08007d21
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a04:	2108      	movs	r1, #8
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa50 	bl	8007eac <USBH_Get_DevDesc>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d130      	bne.n	8007a78 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	7919      	ldrb	r1, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a3a:	b292      	uxth	r2, r2
 8007a3c:	9202      	str	r2, [sp, #8]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	9201      	str	r2, [sp, #4]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4603      	mov	r3, r0
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 ff77 	bl	800893c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7959      	ldrb	r1, [r3, #5]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a62:	b292      	uxth	r2, r2
 8007a64:	9202      	str	r2, [sp, #8]
 8007a66:	2200      	movs	r2, #0
 8007a68:	9201      	str	r2, [sp, #4]
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2200      	movs	r2, #0
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 ff63 	bl	800893c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a76:	e175      	b.n	8007d64 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	f040 8172 	bne.w	8007d64 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a86:	3301      	adds	r3, #1
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d903      	bls.n	8007aa2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	220d      	movs	r2, #13
 8007a9e:	701a      	strb	r2, [r3, #0]
      break;
 8007aa0:	e160      	b.n	8007d64 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	795b      	ldrb	r3, [r3, #5]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 ff97 	bl	80089dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	791b      	ldrb	r3, [r3, #4]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 ff91 	bl	80089dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
      break;
 8007ac0:	e150      	b.n	8007d64 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ac2:	2112      	movs	r1, #18
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9f1 	bl	8007eac <USBH_Get_DevDesc>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d103      	bne.n	8007adc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ada:	e145      	b.n	8007d68 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	f040 8142 	bne.w	8007d68 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aea:	3301      	adds	r3, #1
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d903      	bls.n	8007b06 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	220d      	movs	r2, #13
 8007b02:	701a      	strb	r2, [r3, #0]
      break;
 8007b04:	e130      	b.n	8007d68 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	795b      	ldrb	r3, [r3, #5]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 ff65 	bl	80089dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	791b      	ldrb	r3, [r3, #4]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 ff5f 	bl	80089dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
      break;
 8007b2a:	e11d      	b.n	8007d68 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa68 	bl	8008004 <USBH_SetAddress>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d132      	bne.n	8007ba4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b3e:	2002      	movs	r0, #2
 8007b40:	f001 fa42 	bl	8008fc8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2203      	movs	r2, #3
 8007b50:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7919      	ldrb	r1, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b66:	b292      	uxth	r2, r2
 8007b68:	9202      	str	r2, [sp, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	9201      	str	r2, [sp, #4]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	4603      	mov	r3, r0
 8007b72:	2280      	movs	r2, #128	; 0x80
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fee1 	bl	800893c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7959      	ldrb	r1, [r3, #5]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b8e:	b292      	uxth	r2, r2
 8007b90:	9202      	str	r2, [sp, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	9201      	str	r2, [sp, #4]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fecd 	bl	800893c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ba2:	e0e3      	b.n	8007d6c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	f040 80e0 	bne.w	8007d6c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	220d      	movs	r2, #13
 8007bb0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	705a      	strb	r2, [r3, #1]
      break;
 8007bb8:	e0d8      	b.n	8007d6c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007bba:	2109      	movs	r1, #9
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f99d 	bl	8007efc <USBH_Get_CfgDesc>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2204      	movs	r2, #4
 8007bd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bd2:	e0cd      	b.n	8007d70 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	f040 80ca 	bne.w	8007d70 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007be2:	3301      	adds	r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d903      	bls.n	8007bfe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220d      	movs	r2, #13
 8007bfa:	701a      	strb	r2, [r3, #0]
      break;
 8007bfc:	e0b8      	b.n	8007d70 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	795b      	ldrb	r3, [r3, #5]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fee9 	bl	80089dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	791b      	ldrb	r3, [r3, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fee3 	bl	80089dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
      break;
 8007c22:	e0a5      	b.n	8007d70 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f965 	bl	8007efc <USBH_Get_CfgDesc>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d103      	bne.n	8007c44 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2205      	movs	r2, #5
 8007c40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c42:	e097      	b.n	8007d74 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	f040 8094 	bne.w	8007d74 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c52:	3301      	adds	r3, #1
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d903      	bls.n	8007c6e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	220d      	movs	r2, #13
 8007c6a:	701a      	strb	r2, [r3, #0]
      break;
 8007c6c:	e082      	b.n	8007d74 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	795b      	ldrb	r3, [r3, #5]
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 feb1 	bl	80089dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	791b      	ldrb	r3, [r3, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 feab 	bl	80089dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	701a      	strb	r2, [r3, #0]
      break;
 8007c92:	e06f      	b.n	8007d74 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d019      	beq.n	8007cd2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007caa:	23ff      	movs	r3, #255	; 0xff
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f949 	bl	8007f44 <USBH_Get_StringDesc>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d103      	bne.n	8007cc4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2206      	movs	r2, #6
 8007cc0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007cc2:	e059      	b.n	8007d78 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d156      	bne.n	8007d78 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2206      	movs	r2, #6
 8007cce:	705a      	strb	r2, [r3, #1]
      break;
 8007cd0:	e052      	b.n	8007d78 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2206      	movs	r2, #6
 8007cd6:	705a      	strb	r2, [r3, #1]
      break;
 8007cd8:	e04e      	b.n	8007d78 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d019      	beq.n	8007d18 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cf0:	23ff      	movs	r3, #255	; 0xff
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f926 	bl	8007f44 <USBH_Get_StringDesc>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2207      	movs	r2, #7
 8007d06:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d08:	e038      	b.n	8007d7c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d135      	bne.n	8007d7c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2207      	movs	r2, #7
 8007d14:	705a      	strb	r2, [r3, #1]
      break;
 8007d16:	e031      	b.n	8007d7c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2207      	movs	r2, #7
 8007d1c:	705a      	strb	r2, [r3, #1]
      break;
 8007d1e:	e02d      	b.n	8007d7c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d017      	beq.n	8007d5a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d36:	23ff      	movs	r3, #255	; 0xff
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f903 	bl	8007f44 <USBH_Get_StringDesc>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d4c:	e018      	b.n	8007d80 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d115      	bne.n	8007d80 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
      break;
 8007d58:	e012      	b.n	8007d80 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d5e:	e00f      	b.n	8007d80 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007d60:	bf00      	nop
 8007d62:	e00e      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d64:	bf00      	nop
 8007d66:	e00c      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d68:	bf00      	nop
 8007d6a:	e00a      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d6c:	bf00      	nop
 8007d6e:	e008      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d70:	bf00      	nop
 8007d72:	e006      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d74:	bf00      	nop
 8007d76:	e004      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d78:	bf00      	nop
 8007d7a:	e002      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <USBH_HandleEnum+0x3be>
      break;
 8007d80:	bf00      	nop
  }
  return Status;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f804 	bl	8007dce <USBH_HandleSof>
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b0b      	cmp	r3, #11
 8007dde:	d10a      	bne.n	8007df6 <USBH_HandleSof+0x28>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
  }
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007e0e:	bf00      	nop
}
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e2a:	bf00      	nop
}
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 ff56 	bl	8008d36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	791b      	ldrb	r3, [r3, #4]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fda3 	bl	80089dc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	795b      	ldrb	r3, [r3, #5]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fd9d 	bl	80089dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f864 	bl	8007f9a <USBH_GetDescriptor>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ee8:	78fa      	ldrb	r2, [r7, #3]
 8007eea:	b292      	uxth	r2, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	f000 f918 	bl	8008122 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	331c      	adds	r3, #28
 8007f0c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f0e:	887b      	ldrh	r3, [r7, #2]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f83d 	bl	8007f9a <USBH_GetDescriptor>
 8007f20:	4603      	mov	r3, r0
 8007f22:	72fb      	strb	r3, [r7, #11]
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d107      	bne.n	8007f3a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f30:	887a      	ldrh	r2, [r7, #2]
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f964 	bl	8008202 <USBH_ParseCfgDesc>
  }

  return status;
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af02      	add	r7, sp, #8
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	460b      	mov	r3, r1
 8007f52:	72fb      	strb	r3, [r7, #11]
 8007f54:	4613      	mov	r3, r2
 8007f56:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007f58:	7afb      	ldrb	r3, [r7, #11]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f60:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f68:	893b      	ldrh	r3, [r7, #8]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f812 	bl	8007f9a <USBH_GetDescriptor>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d107      	bne.n	8007f90 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f86:	893a      	ldrh	r2, [r7, #8]
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fa37 	bl	80083fe <USBH_ParseStringDesc>
  }

  return status;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	607b      	str	r3, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	72fb      	strb	r3, [r7, #11]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	789b      	ldrb	r3, [r3, #2]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d11c      	bne.n	8007fee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2206      	movs	r2, #6
 8007fc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	893a      	ldrh	r2, [r7, #8]
 8007fca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007fcc:	893b      	ldrh	r3, [r7, #8]
 8007fce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fd6:	d104      	bne.n	8007fe2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f240 4209 	movw	r2, #1033	; 0x409
 8007fde:	829a      	strh	r2, [r3, #20]
 8007fe0:	e002      	b.n	8007fe8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8b3a      	ldrh	r2, [r7, #24]
 8007fec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fee:	8b3b      	ldrh	r3, [r7, #24]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fa50 	bl	800849a <USBH_CtlReq>
 8007ffa:	4603      	mov	r3, r0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	789b      	ldrb	r3, [r3, #2]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d10f      	bne.n	8008038 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2205      	movs	r2, #5
 8008022:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	b29a      	uxth	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008038:	2200      	movs	r2, #0
 800803a:	2100      	movs	r1, #0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fa2c 	bl	800849a <USBH_CtlReq>
 8008042:	4603      	mov	r3, r0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	789b      	ldrb	r3, [r3, #2]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d10e      	bne.n	800807e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2209      	movs	r2, #9
 800806a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	887a      	ldrh	r2, [r7, #2]
 8008070:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800807e:	2200      	movs	r2, #0
 8008080:	2100      	movs	r1, #0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa09 	bl	800849a <USBH_CtlReq>
 8008088:	4603      	mov	r3, r0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	789b      	ldrb	r3, [r3, #2]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d10f      	bne.n	80080c6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2203      	movs	r2, #3
 80080b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080c6:	2200      	movs	r2, #0
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f9e5 	bl	800849a <USBH_CtlReq>
 80080d0:	4603      	mov	r3, r0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	789b      	ldrb	r3, [r3, #2]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d10f      	bne.n	800810e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2202      	movs	r2, #2
 80080f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	b29a      	uxth	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f9c1 	bl	800849a <USBH_CtlReq>
 8008118:	4603      	mov	r3, r0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	781a      	ldrb	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	785a      	ldrb	r2, [r3, #1]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	3302      	adds	r3, #2
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b29a      	uxth	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	3303      	adds	r3, #3
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	b29b      	uxth	r3, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	791a      	ldrb	r2, [r3, #4]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	795a      	ldrb	r2, [r3, #5]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	799a      	ldrb	r2, [r3, #6]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	79da      	ldrb	r2, [r3, #7]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	2b08      	cmp	r3, #8
 8008180:	d939      	bls.n	80081f6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	3308      	adds	r3, #8
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b29a      	uxth	r2, r3
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	3309      	adds	r3, #9
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	b29b      	uxth	r3, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	330a      	adds	r3, #10
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	330b      	adds	r3, #11
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	330c      	adds	r3, #12
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	330d      	adds	r3, #13
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	4313      	orrs	r3, r2
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	7b9a      	ldrb	r2, [r3, #14]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	7bda      	ldrb	r2, [r3, #15]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	7c1a      	ldrb	r2, [r3, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	7c5a      	ldrb	r2, [r3, #17]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	745a      	strb	r2, [r3, #17]
  }
}
 80081f6:	bf00      	nop
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b08a      	sub	sp, #40	; 0x28
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	4613      	mov	r3, r2
 800820e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	785a      	ldrb	r2, [r3, #1]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	3302      	adds	r3, #2
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	b29a      	uxth	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	3303      	adds	r3, #3
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	b29b      	uxth	r3, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	b29a      	uxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	791a      	ldrb	r2, [r3, #4]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	795a      	ldrb	r2, [r3, #5]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	799a      	ldrb	r2, [r3, #6]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	79da      	ldrb	r2, [r3, #7]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	7a1a      	ldrb	r2, [r3, #8]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	2b09      	cmp	r3, #9
 800827c:	d95f      	bls.n	800833e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800827e:	2309      	movs	r3, #9
 8008280:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008282:	2300      	movs	r3, #0
 8008284:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008286:	e051      	b.n	800832c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008288:	f107 0316 	add.w	r3, r7, #22
 800828c:	4619      	mov	r1, r3
 800828e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008290:	f000 f8e8 	bl	8008464 <USBH_GetNextDesc>
 8008294:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	2b04      	cmp	r3, #4
 800829c:	d146      	bne.n	800832c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800829e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082a2:	221a      	movs	r2, #26
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	3308      	adds	r3, #8
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	3302      	adds	r3, #2
 80082b0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80082b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b4:	69f8      	ldr	r0, [r7, #28]
 80082b6:	f000 f846 	bl	8008346 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082c4:	e022      	b.n	800830c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082c6:	f107 0316 	add.w	r3, r7, #22
 80082ca:	4619      	mov	r1, r3
 80082cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ce:	f000 f8c9 	bl	8008464 <USBH_GetNextDesc>
 80082d2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b05      	cmp	r3, #5
 80082da:	d117      	bne.n	800830c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082e4:	3201      	adds	r2, #1
 80082e6:	00d2      	lsls	r2, r2, #3
 80082e8:	211a      	movs	r1, #26
 80082ea:	fb01 f303 	mul.w	r3, r1, r3
 80082ee:	4413      	add	r3, r2
 80082f0:	3308      	adds	r3, #8
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4413      	add	r3, r2
 80082f6:	3304      	adds	r3, #4
 80082f8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80082fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082fc:	69b8      	ldr	r0, [r7, #24]
 80082fe:	f000 f851 	bl	80083a4 <USBH_ParseEPDesc>
            ep_ix++;
 8008302:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008306:	3301      	adds	r3, #1
 8008308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	791b      	ldrb	r3, [r3, #4]
 8008310:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008314:	429a      	cmp	r2, r3
 8008316:	d204      	bcs.n	8008322 <USBH_ParseCfgDesc+0x120>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	885a      	ldrh	r2, [r3, #2]
 800831c:	8afb      	ldrh	r3, [r7, #22]
 800831e:	429a      	cmp	r2, r3
 8008320:	d8d1      	bhi.n	80082c6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008326:	3301      	adds	r3, #1
 8008328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800832c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008330:	2b01      	cmp	r3, #1
 8008332:	d804      	bhi.n	800833e <USBH_ParseCfgDesc+0x13c>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	885a      	ldrh	r2, [r3, #2]
 8008338:	8afb      	ldrh	r3, [r7, #22]
 800833a:	429a      	cmp	r2, r3
 800833c:	d8a4      	bhi.n	8008288 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800833e:	bf00      	nop
 8008340:	3728      	adds	r7, #40	; 0x28
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	785a      	ldrb	r2, [r3, #1]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	789a      	ldrb	r2, [r3, #2]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	78da      	ldrb	r2, [r3, #3]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	791a      	ldrb	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	795a      	ldrb	r2, [r3, #5]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	799a      	ldrb	r2, [r3, #6]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	79da      	ldrb	r2, [r3, #7]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	7a1a      	ldrb	r2, [r3, #8]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	721a      	strb	r2, [r3, #8]
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781a      	ldrb	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	785a      	ldrb	r2, [r3, #1]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	789a      	ldrb	r2, [r3, #2]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	78da      	ldrb	r2, [r3, #3]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	3304      	adds	r3, #4
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	3305      	adds	r3, #5
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	021b      	lsls	r3, r3, #8
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4313      	orrs	r3, r2
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	799a      	ldrb	r2, [r3, #6]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	719a      	strb	r2, [r3, #6]
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083fe:	b480      	push	{r7}
 8008400:	b087      	sub	sp, #28
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	4613      	mov	r3, r2
 800840a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b03      	cmp	r3, #3
 8008414:	d120      	bne.n	8008458 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	1e9a      	subs	r2, r3, #2
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	4293      	cmp	r3, r2
 8008420:	bf28      	it	cs
 8008422:	4613      	movcs	r3, r2
 8008424:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3302      	adds	r3, #2
 800842a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800842c:	2300      	movs	r3, #0
 800842e:	82fb      	strh	r3, [r7, #22]
 8008430:	e00b      	b.n	800844a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008432:	8afb      	ldrh	r3, [r7, #22]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	781a      	ldrb	r2, [r3, #0]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3301      	adds	r3, #1
 8008442:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008444:	8afb      	ldrh	r3, [r7, #22]
 8008446:	3302      	adds	r3, #2
 8008448:	82fb      	strh	r3, [r7, #22]
 800844a:	8afa      	ldrh	r2, [r7, #22]
 800844c:	8abb      	ldrh	r3, [r7, #20]
 800844e:	429a      	cmp	r2, r3
 8008450:	d3ef      	bcc.n	8008432 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2200      	movs	r2, #0
 8008456:	701a      	strb	r2, [r3, #0]
  }
}
 8008458:	bf00      	nop
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	881a      	ldrh	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	4413      	add	r3, r2
 800847a:	b29a      	uxth	r2, r3
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4413      	add	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b086      	sub	sp, #24
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	4613      	mov	r3, r2
 80084a6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80084a8:	2301      	movs	r3, #1
 80084aa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	789b      	ldrb	r3, [r3, #2]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d002      	beq.n	80084ba <USBH_CtlReq+0x20>
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d00f      	beq.n	80084d8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80084b8:	e027      	b.n	800850a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	88fa      	ldrh	r2, [r7, #6]
 80084c4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2202      	movs	r2, #2
 80084d0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80084d2:	2301      	movs	r3, #1
 80084d4:	75fb      	strb	r3, [r7, #23]
      break;
 80084d6:	e018      	b.n	800850a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f81b 	bl	8008514 <USBH_HandleControl>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <USBH_CtlReq+0x54>
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d106      	bne.n	80084fc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	761a      	strb	r2, [r3, #24]
      break;
 80084fa:	e005      	b.n	8008508 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d102      	bne.n	8008508 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2201      	movs	r2, #1
 8008506:	709a      	strb	r2, [r3, #2]
      break;
 8008508:	bf00      	nop
  }
  return status;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af02      	add	r7, sp, #8
 800851a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800851c:	2301      	movs	r3, #1
 800851e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008520:	2300      	movs	r3, #0
 8008522:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7e1b      	ldrb	r3, [r3, #24]
 8008528:	3b01      	subs	r3, #1
 800852a:	2b0a      	cmp	r3, #10
 800852c:	f200 8156 	bhi.w	80087dc <USBH_HandleControl+0x2c8>
 8008530:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <USBH_HandleControl+0x24>)
 8008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008536:	bf00      	nop
 8008538:	08008565 	.word	0x08008565
 800853c:	0800857f 	.word	0x0800857f
 8008540:	080085e9 	.word	0x080085e9
 8008544:	0800860f 	.word	0x0800860f
 8008548:	08008647 	.word	0x08008647
 800854c:	08008671 	.word	0x08008671
 8008550:	080086c3 	.word	0x080086c3
 8008554:	080086e5 	.word	0x080086e5
 8008558:	08008721 	.word	0x08008721
 800855c:	08008747 	.word	0x08008747
 8008560:	08008785 	.word	0x08008785
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f103 0110 	add.w	r1, r3, #16
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	795b      	ldrb	r3, [r3, #5]
 800856e:	461a      	mov	r2, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f943 	bl	80087fc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2202      	movs	r2, #2
 800857a:	761a      	strb	r2, [r3, #24]
      break;
 800857c:	e139      	b.n	80087f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	795b      	ldrb	r3, [r3, #5]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fcc5 	bl	8008f14 <USBH_LL_GetURBState>
 800858a:	4603      	mov	r3, r0
 800858c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d11e      	bne.n	80085d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	7c1b      	ldrb	r3, [r3, #16]
 8008598:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800859c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	8adb      	ldrh	r3, [r3, #22]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80085a6:	7b7b      	ldrb	r3, [r7, #13]
 80085a8:	2b80      	cmp	r3, #128	; 0x80
 80085aa:	d103      	bne.n	80085b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2203      	movs	r2, #3
 80085b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085b2:	e115      	b.n	80087e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2205      	movs	r2, #5
 80085b8:	761a      	strb	r2, [r3, #24]
      break;
 80085ba:	e111      	b.n	80087e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80085bc:	7b7b      	ldrb	r3, [r7, #13]
 80085be:	2b80      	cmp	r3, #128	; 0x80
 80085c0:	d103      	bne.n	80085ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2209      	movs	r2, #9
 80085c6:	761a      	strb	r2, [r3, #24]
      break;
 80085c8:	e10a      	b.n	80087e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2207      	movs	r2, #7
 80085ce:	761a      	strb	r2, [r3, #24]
      break;
 80085d0:	e106      	b.n	80087e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d003      	beq.n	80085e0 <USBH_HandleControl+0xcc>
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b02      	cmp	r3, #2
 80085dc:	f040 8100 	bne.w	80087e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	220b      	movs	r2, #11
 80085e4:	761a      	strb	r2, [r3, #24]
      break;
 80085e6:	e0fb      	b.n	80087e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6899      	ldr	r1, [r3, #8]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	899a      	ldrh	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f93a 	bl	800887a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2204      	movs	r2, #4
 800860a:	761a      	strb	r2, [r3, #24]
      break;
 800860c:	e0f1      	b.n	80087f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	791b      	ldrb	r3, [r3, #4]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc7d 	bl	8008f14 <USBH_LL_GetURBState>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d102      	bne.n	800862a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2209      	movs	r2, #9
 8008628:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	2b05      	cmp	r3, #5
 800862e:	d102      	bne.n	8008636 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008630:	2303      	movs	r3, #3
 8008632:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008634:	e0d6      	b.n	80087e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b04      	cmp	r3, #4
 800863a:	f040 80d3 	bne.w	80087e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	220b      	movs	r2, #11
 8008642:	761a      	strb	r2, [r3, #24]
      break;
 8008644:	e0ce      	b.n	80087e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6899      	ldr	r1, [r3, #8]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	899a      	ldrh	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	795b      	ldrb	r3, [r3, #5]
 8008652:	2001      	movs	r0, #1
 8008654:	9000      	str	r0, [sp, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f8ea 	bl	8008830 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008662:	b29a      	uxth	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2206      	movs	r2, #6
 800866c:	761a      	strb	r2, [r3, #24]
      break;
 800866e:	e0c0      	b.n	80087f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	795b      	ldrb	r3, [r3, #5]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fc4c 	bl	8008f14 <USBH_LL_GetURBState>
 800867c:	4603      	mov	r3, r0
 800867e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d103      	bne.n	800868e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2207      	movs	r2, #7
 800868a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800868c:	e0ac      	b.n	80087e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b05      	cmp	r3, #5
 8008692:	d105      	bne.n	80086a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	220c      	movs	r2, #12
 8008698:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800869a:	2303      	movs	r3, #3
 800869c:	73fb      	strb	r3, [r7, #15]
      break;
 800869e:	e0a3      	b.n	80087e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d103      	bne.n	80086ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2205      	movs	r2, #5
 80086aa:	761a      	strb	r2, [r3, #24]
      break;
 80086ac:	e09c      	b.n	80087e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	f040 8099 	bne.w	80087e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	220b      	movs	r2, #11
 80086ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80086bc:	2302      	movs	r3, #2
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	e092      	b.n	80087e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	791b      	ldrb	r3, [r3, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	2100      	movs	r1, #0
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f8d5 	bl	800887a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2208      	movs	r2, #8
 80086e0:	761a      	strb	r2, [r3, #24]

      break;
 80086e2:	e086      	b.n	80087f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	791b      	ldrb	r3, [r3, #4]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fc12 	bl	8008f14 <USBH_LL_GetURBState>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d105      	bne.n	8008706 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	220d      	movs	r2, #13
 80086fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008704:	e072      	b.n	80087ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	2b04      	cmp	r3, #4
 800870a:	d103      	bne.n	8008714 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	220b      	movs	r2, #11
 8008710:	761a      	strb	r2, [r3, #24]
      break;
 8008712:	e06b      	b.n	80087ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	2b05      	cmp	r3, #5
 8008718:	d168      	bne.n	80087ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800871a:	2303      	movs	r3, #3
 800871c:	73fb      	strb	r3, [r7, #15]
      break;
 800871e:	e065      	b.n	80087ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	795b      	ldrb	r3, [r3, #5]
 8008724:	2201      	movs	r2, #1
 8008726:	9200      	str	r2, [sp, #0]
 8008728:	2200      	movs	r2, #0
 800872a:	2100      	movs	r1, #0
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f87f 	bl	8008830 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008738:	b29a      	uxth	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	220a      	movs	r2, #10
 8008742:	761a      	strb	r2, [r3, #24]
      break;
 8008744:	e055      	b.n	80087f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	795b      	ldrb	r3, [r3, #5]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fbe1 	bl	8008f14 <USBH_LL_GetURBState>
 8008752:	4603      	mov	r3, r0
 8008754:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d105      	bne.n	8008768 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220d      	movs	r2, #13
 8008764:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008766:	e043      	b.n	80087f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d103      	bne.n	8008776 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2209      	movs	r2, #9
 8008772:	761a      	strb	r2, [r3, #24]
      break;
 8008774:	e03c      	b.n	80087f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b04      	cmp	r3, #4
 800877a:	d139      	bne.n	80087f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	220b      	movs	r2, #11
 8008780:	761a      	strb	r2, [r3, #24]
      break;
 8008782:	e035      	b.n	80087f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	7e5b      	ldrb	r3, [r3, #25]
 8008788:	3301      	adds	r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	765a      	strb	r2, [r3, #25]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	7e5b      	ldrb	r3, [r3, #25]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d806      	bhi.n	80087a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80087a4:	e025      	b.n	80087f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087ac:	2106      	movs	r1, #6
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	795b      	ldrb	r3, [r3, #5]
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f90c 	bl	80089dc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	791b      	ldrb	r3, [r3, #4]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f906 	bl	80089dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80087d6:	2302      	movs	r3, #2
 80087d8:	73fb      	strb	r3, [r7, #15]
      break;
 80087da:	e00a      	b.n	80087f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80087dc:	bf00      	nop
 80087de:	e008      	b.n	80087f2 <USBH_HandleControl+0x2de>
      break;
 80087e0:	bf00      	nop
 80087e2:	e006      	b.n	80087f2 <USBH_HandleControl+0x2de>
      break;
 80087e4:	bf00      	nop
 80087e6:	e004      	b.n	80087f2 <USBH_HandleControl+0x2de>
      break;
 80087e8:	bf00      	nop
 80087ea:	e002      	b.n	80087f2 <USBH_HandleControl+0x2de>
      break;
 80087ec:	bf00      	nop
 80087ee:	e000      	b.n	80087f2 <USBH_HandleControl+0x2de>
      break;
 80087f0:	bf00      	nop
  }

  return status;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af04      	add	r7, sp, #16
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4613      	mov	r3, r2
 8008808:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800880a:	79f9      	ldrb	r1, [r7, #7]
 800880c:	2300      	movs	r3, #0
 800880e:	9303      	str	r3, [sp, #12]
 8008810:	2308      	movs	r3, #8
 8008812:	9302      	str	r3, [sp, #8]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	2300      	movs	r3, #0
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	2300      	movs	r3, #0
 800881e:	2200      	movs	r2, #0
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 fb46 	bl	8008eb2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af04      	add	r7, sp, #16
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4611      	mov	r1, r2
 800883c:	461a      	mov	r2, r3
 800883e:	460b      	mov	r3, r1
 8008840:	80fb      	strh	r3, [r7, #6]
 8008842:	4613      	mov	r3, r2
 8008844:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008854:	7979      	ldrb	r1, [r7, #5]
 8008856:	7e3b      	ldrb	r3, [r7, #24]
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	9302      	str	r3, [sp, #8]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	2301      	movs	r3, #1
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2300      	movs	r3, #0
 8008868:	2200      	movs	r2, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fb21 	bl	8008eb2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b088      	sub	sp, #32
 800887e:	af04      	add	r7, sp, #16
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	4611      	mov	r1, r2
 8008886:	461a      	mov	r2, r3
 8008888:	460b      	mov	r3, r1
 800888a:	80fb      	strh	r3, [r7, #6]
 800888c:	4613      	mov	r3, r2
 800888e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008890:	7979      	ldrb	r1, [r7, #5]
 8008892:	2300      	movs	r3, #0
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	9302      	str	r3, [sp, #8]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	2301      	movs	r3, #1
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	2300      	movs	r3, #0
 80088a4:	2201      	movs	r2, #1
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fb03 	bl	8008eb2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80088ac:	2300      	movs	r3, #0

}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b088      	sub	sp, #32
 80088ba:	af04      	add	r7, sp, #16
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	4611      	mov	r1, r2
 80088c2:	461a      	mov	r2, r3
 80088c4:	460b      	mov	r3, r1
 80088c6:	80fb      	strh	r3, [r7, #6]
 80088c8:	4613      	mov	r3, r2
 80088ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088da:	7979      	ldrb	r1, [r7, #5]
 80088dc:	7e3b      	ldrb	r3, [r7, #24]
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	9302      	str	r3, [sp, #8]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	2301      	movs	r3, #1
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2302      	movs	r3, #2
 80088ee:	2200      	movs	r2, #0
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fade 	bl	8008eb2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af04      	add	r7, sp, #16
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	4611      	mov	r1, r2
 800890c:	461a      	mov	r2, r3
 800890e:	460b      	mov	r3, r1
 8008910:	80fb      	strh	r3, [r7, #6]
 8008912:	4613      	mov	r3, r2
 8008914:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008916:	7979      	ldrb	r1, [r7, #5]
 8008918:	2300      	movs	r3, #0
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	2301      	movs	r3, #1
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	2302      	movs	r3, #2
 800892a:	2201      	movs	r2, #1
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 fac0 	bl	8008eb2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af04      	add	r7, sp, #16
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	4608      	mov	r0, r1
 8008946:	4611      	mov	r1, r2
 8008948:	461a      	mov	r2, r3
 800894a:	4603      	mov	r3, r0
 800894c:	70fb      	strb	r3, [r7, #3]
 800894e:	460b      	mov	r3, r1
 8008950:	70bb      	strb	r3, [r7, #2]
 8008952:	4613      	mov	r3, r2
 8008954:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008956:	7878      	ldrb	r0, [r7, #1]
 8008958:	78ba      	ldrb	r2, [r7, #2]
 800895a:	78f9      	ldrb	r1, [r7, #3]
 800895c:	8b3b      	ldrh	r3, [r7, #24]
 800895e:	9302      	str	r3, [sp, #8]
 8008960:	7d3b      	ldrb	r3, [r7, #20]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	7c3b      	ldrb	r3, [r7, #16]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4603      	mov	r3, r0
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa53 	bl	8008e16 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa72 	bl	8008e74 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f836 	bl	8008a18 <USBH_GetFreePipe>
 80089ac:	4603      	mov	r3, r0
 80089ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80089b0:	89fb      	ldrh	r3, [r7, #14]
 80089b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00a      	beq.n	80089d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	89fb      	ldrh	r3, [r7, #14]
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	33e0      	adds	r3, #224	; 0xe0
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	b2db      	uxtb	r3, r3
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	2b0a      	cmp	r3, #10
 80089ec:	d80d      	bhi.n	8008a0a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	33e0      	adds	r3, #224	; 0xe0
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	33e0      	adds	r3, #224	; 0xe0
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	440b      	add	r3, r1
 8008a08:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]
 8008a28:	e00f      	b.n	8008a4a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	33e0      	adds	r3, #224	; 0xe0
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d102      	bne.n	8008a44 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	e007      	b.n	8008a54 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	3301      	adds	r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	2b0a      	cmp	r3, #10
 8008a4e:	d9ec      	bls.n	8008a2a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008a64:	2201      	movs	r2, #1
 8008a66:	490e      	ldr	r1, [pc, #56]	; (8008aa0 <MX_USB_HOST_Init+0x40>)
 8008a68:	480e      	ldr	r0, [pc, #56]	; (8008aa4 <MX_USB_HOST_Init+0x44>)
 8008a6a:	f7fe fca1 	bl	80073b0 <USBH_Init>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a74:	f7f8 f820 	bl	8000ab8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008a78:	490b      	ldr	r1, [pc, #44]	; (8008aa8 <MX_USB_HOST_Init+0x48>)
 8008a7a:	480a      	ldr	r0, [pc, #40]	; (8008aa4 <MX_USB_HOST_Init+0x44>)
 8008a7c:	f7fe fd26 	bl	80074cc <USBH_RegisterClass>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008a86:	f7f8 f817 	bl	8000ab8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008a8a:	4806      	ldr	r0, [pc, #24]	; (8008aa4 <MX_USB_HOST_Init+0x44>)
 8008a8c:	f7fe fdaa 	bl	80075e4 <USBH_Start>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008a96:	f7f8 f80f 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	08008ac1 	.word	0x08008ac1
 8008aa4:	20000248 	.word	0x20000248
 8008aa8:	2000000c 	.word	0x2000000c

08008aac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008ab0:	4802      	ldr	r0, [pc, #8]	; (8008abc <MX_USB_HOST_Process+0x10>)
 8008ab2:	f7fe fda7 	bl	8007604 <USBH_Process>
}
 8008ab6:	bf00      	nop
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000248 	.word	0x20000248

08008ac0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d819      	bhi.n	8008b08 <USBH_UserProcess+0x48>
 8008ad4:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <USBH_UserProcess+0x1c>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008b09 	.word	0x08008b09
 8008ae0:	08008af9 	.word	0x08008af9
 8008ae4:	08008b09 	.word	0x08008b09
 8008ae8:	08008b01 	.word	0x08008b01
 8008aec:	08008af1 	.word	0x08008af1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008af0:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <USBH_UserProcess+0x58>)
 8008af2:	2203      	movs	r2, #3
 8008af4:	701a      	strb	r2, [r3, #0]
  break;
 8008af6:	e008      	b.n	8008b0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008af8:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <USBH_UserProcess+0x58>)
 8008afa:	2202      	movs	r2, #2
 8008afc:	701a      	strb	r2, [r3, #0]
  break;
 8008afe:	e004      	b.n	8008b0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <USBH_UserProcess+0x58>)
 8008b02:	2201      	movs	r2, #1
 8008b04:	701a      	strb	r2, [r3, #0]
  break;
 8008b06:	e000      	b.n	8008b0a <USBH_UserProcess+0x4a>

  default:
  break;
 8008b08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b0a:	bf00      	nop
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	200000b0 	.word	0x200000b0

08008b1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	; 0x28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b24:	f107 0314 	add.w	r3, r7, #20
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	605a      	str	r2, [r3, #4]
 8008b2e:	609a      	str	r2, [r3, #8]
 8008b30:	60da      	str	r2, [r3, #12]
 8008b32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b3c:	d147      	bne.n	8008bce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b3e:	2300      	movs	r3, #0
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	4b25      	ldr	r3, [pc, #148]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b46:	4a24      	ldr	r2, [pc, #144]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b48:	f043 0301 	orr.w	r3, r3, #1
 8008b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b4e:	4b22      	ldr	r3, [pc, #136]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008b68:	f107 0314 	add.w	r3, r7, #20
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	481b      	ldr	r0, [pc, #108]	; (8008bdc <HAL_HCD_MspInit+0xc0>)
 8008b70:	f7f8 ff10 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008b74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b82:	2300      	movs	r3, #0
 8008b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b86:	230a      	movs	r3, #10
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b8a:	f107 0314 	add.w	r3, r7, #20
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4812      	ldr	r0, [pc, #72]	; (8008bdc <HAL_HCD_MspInit+0xc0>)
 8008b92:	f7f8 feff 	bl	8001994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b96:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9a:	4a0f      	ldr	r2, [pc, #60]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba0:	6353      	str	r3, [r2, #52]	; 0x34
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008baa:	4a0b      	ldr	r2, [pc, #44]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <HAL_HCD_MspInit+0xbc>)
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	2043      	movs	r0, #67	; 0x43
 8008bc4:	f7f8 feaf 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008bc8:	2043      	movs	r0, #67	; 0x43
 8008bca:	f7f8 fec8 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bce:	bf00      	nop
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	40023800 	.word	0x40023800
 8008bdc:	40020000 	.word	0x40020000

08008be0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff f8db 	bl	8007daa <USBH_LL_IncTimer>
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff f913 	bl	8007e36 <USBH_LL_Connect>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff f91c 	bl	8007e64 <USBH_LL_Disconnect>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
 8008c40:	4613      	mov	r3, r2
 8008c42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff f8cd 	bl	8007dfe <USBH_LL_PortEnabled>
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff f8cd 	bl	8007e1a <USBH_LL_PortDisabled>
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d12a      	bne.n	8008cf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008c9a:	4a18      	ldr	r2, [pc, #96]	; (8008cfc <USBH_LL_Init+0x74>)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <USBH_LL_Init+0x74>)
 8008ca6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008cb2:	4b12      	ldr	r3, [pc, #72]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cb4:	2208      	movs	r2, #8
 8008cb6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008cb8:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cbe:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008cc4:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cca:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <USBH_LL_Init+0x74>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008cd0:	480a      	ldr	r0, [pc, #40]	; (8008cfc <USBH_LL_Init+0x74>)
 8008cd2:	f7f9 f814 	bl	8001cfe <HAL_HCD_Init>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008cdc:	f7f7 feec 	bl	8000ab8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ce0:	4806      	ldr	r0, [pc, #24]	; (8008cfc <USBH_LL_Init+0x74>)
 8008ce2:	f7f9 fbf8 	bl	80024d6 <HAL_HCD_GetCurrentFrame>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff f84e 	bl	8007d8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000620 	.word	0x20000620

08008d00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f9 fb67 	bl	80023ea <HAL_HCD_Start>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f95c 	bl	8008fe0 <USBH_Get_USB_Status>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7f9 fb6f 	bl	8002430 <HAL_HCD_Stop>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f941 	bl	8008fe0 <USBH_Get_USB_Status>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7f9 fbb7 	bl	80024f2 <HAL_HCD_GetCurrentSpeed>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d00c      	beq.n	8008da4 <USBH_LL_GetSpeed+0x38>
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d80d      	bhi.n	8008daa <USBH_LL_GetSpeed+0x3e>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <USBH_LL_GetSpeed+0x2c>
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d003      	beq.n	8008d9e <USBH_LL_GetSpeed+0x32>
 8008d96:	e008      	b.n	8008daa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9c:	e008      	b.n	8008db0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]
    break;
 8008da2:	e005      	b.n	8008db0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008da4:	2302      	movs	r3, #2
 8008da6:	73fb      	strb	r3, [r7, #15]
    break;
 8008da8:	e002      	b.n	8008db0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008daa:	2301      	movs	r3, #1
 8008dac:	73fb      	strb	r3, [r7, #15]
    break;
 8008dae:	bf00      	nop
  }
  return  speed;
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f9 fb4a 	bl	800246a <HAL_HCD_ResetPort>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 f8ff 	bl	8008fe0 <USBH_Get_USB_Status>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e02:	78fa      	ldrb	r2, [r7, #3]
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7f9 fb51 	bl	80024ae <HAL_HCD_HC_GetXferCount>
 8008e0c:	4603      	mov	r3, r0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e16:	b590      	push	{r4, r7, lr}
 8008e18:	b089      	sub	sp, #36	; 0x24
 8008e1a:	af04      	add	r7, sp, #16
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	461a      	mov	r2, r3
 8008e24:	4603      	mov	r3, r0
 8008e26:	70fb      	strb	r3, [r7, #3]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70bb      	strb	r3, [r7, #2]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e3e:	787c      	ldrb	r4, [r7, #1]
 8008e40:	78ba      	ldrb	r2, [r7, #2]
 8008e42:	78f9      	ldrb	r1, [r7, #3]
 8008e44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e46:	9302      	str	r3, [sp, #8]
 8008e48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	4623      	mov	r3, r4
 8008e56:	f7f8 ffb4 	bl	8001dc2 <HAL_HCD_HC_Init>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 f8bd 	bl	8008fe0 <USBH_Get_USB_Status>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd90      	pop	{r4, r7, pc}

08008e74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f9 f824 	bl	8001ee0 <HAL_HCD_HC_Halt>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f89e 	bl	8008fe0 <USBH_Get_USB_Status>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008eb2:	b590      	push	{r4, r7, lr}
 8008eb4:	b089      	sub	sp, #36	; 0x24
 8008eb6:	af04      	add	r7, sp, #16
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	4608      	mov	r0, r1
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	70fb      	strb	r3, [r7, #3]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70bb      	strb	r3, [r7, #2]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008eda:	787c      	ldrb	r4, [r7, #1]
 8008edc:	78ba      	ldrb	r2, [r7, #2]
 8008ede:	78f9      	ldrb	r1, [r7, #3]
 8008ee0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ee4:	9303      	str	r3, [sp, #12]
 8008ee6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	f7f9 f817 	bl	8001f28 <HAL_HCD_HC_SubmitRequest>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 f86d 	bl	8008fe0 <USBH_Get_USB_Status>
 8008f06:	4603      	mov	r3, r0
 8008f08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd90      	pop	{r4, r7, pc}

08008f14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f26:	78fa      	ldrb	r2, [r7, #3]
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7f9 faab 	bl	8002486 <HAL_HCD_HC_GetURBState>
 8008f30:	4603      	mov	r3, r0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d103      	bne.n	8008f58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f870 	bl	8009038 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008f58:	20c8      	movs	r0, #200	; 0xc8
 8008f5a:	f7f8 f8a3 	bl	80010a4 <HAL_Delay>
  return USBH_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
 8008f74:	4613      	mov	r3, r2
 8008f76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	212c      	movs	r1, #44	; 0x2c
 8008f86:	fb01 f303 	mul.w	r3, r1, r3
 8008f8a:	4413      	add	r3, r2
 8008f8c:	333b      	adds	r3, #59	; 0x3b
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d009      	beq.n	8008fa8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	212c      	movs	r1, #44	; 0x2c
 8008f9a:	fb01 f303 	mul.w	r3, r1, r3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3354      	adds	r3, #84	; 0x54
 8008fa2:	78ba      	ldrb	r2, [r7, #2]
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	e008      	b.n	8008fba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	212c      	movs	r1, #44	; 0x2c
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	3355      	adds	r3, #85	; 0x55
 8008fb6:	78ba      	ldrb	r2, [r7, #2]
 8008fb8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7f8 f867 	bl	80010a4 <HAL_Delay>
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d817      	bhi.n	8009024 <USBH_Get_USB_Status+0x44>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <USBH_Get_USB_Status+0x1c>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	08009013 	.word	0x08009013
 8009004:	08009019 	.word	0x08009019
 8009008:	0800901f 	.word	0x0800901f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
    break;
 8009010:	e00b      	b.n	800902a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009012:	2302      	movs	r3, #2
 8009014:	73fb      	strb	r3, [r7, #15]
    break;
 8009016:	e008      	b.n	800902a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
    break;
 800901c:	e005      	b.n	800902a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800901e:	2302      	movs	r3, #2
 8009020:	73fb      	strb	r3, [r7, #15]
    break;
 8009022:	e002      	b.n	800902a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009024:	2302      	movs	r3, #2
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	bf00      	nop
  }
  return usb_status;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
 8009050:	e001      	b.n	8009056 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009052:	2301      	movs	r3, #1
 8009054:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	461a      	mov	r2, r3
 800905a:	2101      	movs	r1, #1
 800905c:	4803      	ldr	r0, [pc, #12]	; (800906c <MX_DriverVbusFS+0x34>)
 800905e:	f7f8 fe35 	bl	8001ccc <HAL_GPIO_WritePin>
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	40020800 	.word	0x40020800

08009070 <__errno>:
 8009070:	4b01      	ldr	r3, [pc, #4]	; (8009078 <__errno+0x8>)
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	2000002c 	.word	0x2000002c

0800907c <__libc_init_array>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	4d0d      	ldr	r5, [pc, #52]	; (80090b4 <__libc_init_array+0x38>)
 8009080:	4c0d      	ldr	r4, [pc, #52]	; (80090b8 <__libc_init_array+0x3c>)
 8009082:	1b64      	subs	r4, r4, r5
 8009084:	10a4      	asrs	r4, r4, #2
 8009086:	2600      	movs	r6, #0
 8009088:	42a6      	cmp	r6, r4
 800908a:	d109      	bne.n	80090a0 <__libc_init_array+0x24>
 800908c:	4d0b      	ldr	r5, [pc, #44]	; (80090bc <__libc_init_array+0x40>)
 800908e:	4c0c      	ldr	r4, [pc, #48]	; (80090c0 <__libc_init_array+0x44>)
 8009090:	f000 f8f8 	bl	8009284 <_init>
 8009094:	1b64      	subs	r4, r4, r5
 8009096:	10a4      	asrs	r4, r4, #2
 8009098:	2600      	movs	r6, #0
 800909a:	42a6      	cmp	r6, r4
 800909c:	d105      	bne.n	80090aa <__libc_init_array+0x2e>
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a4:	4798      	blx	r3
 80090a6:	3601      	adds	r6, #1
 80090a8:	e7ee      	b.n	8009088 <__libc_init_array+0xc>
 80090aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ae:	4798      	blx	r3
 80090b0:	3601      	adds	r6, #1
 80090b2:	e7f2      	b.n	800909a <__libc_init_array+0x1e>
 80090b4:	080092c0 	.word	0x080092c0
 80090b8:	080092c0 	.word	0x080092c0
 80090bc:	080092c0 	.word	0x080092c0
 80090c0:	080092c4 	.word	0x080092c4

080090c4 <malloc>:
 80090c4:	4b02      	ldr	r3, [pc, #8]	; (80090d0 <malloc+0xc>)
 80090c6:	4601      	mov	r1, r0
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	f000 b863 	b.w	8009194 <_malloc_r>
 80090ce:	bf00      	nop
 80090d0:	2000002c 	.word	0x2000002c

080090d4 <free>:
 80090d4:	4b02      	ldr	r3, [pc, #8]	; (80090e0 <free+0xc>)
 80090d6:	4601      	mov	r1, r0
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	f000 b80b 	b.w	80090f4 <_free_r>
 80090de:	bf00      	nop
 80090e0:	2000002c 	.word	0x2000002c

080090e4 <memset>:
 80090e4:	4402      	add	r2, r0
 80090e6:	4603      	mov	r3, r0
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d100      	bne.n	80090ee <memset+0xa>
 80090ec:	4770      	bx	lr
 80090ee:	f803 1b01 	strb.w	r1, [r3], #1
 80090f2:	e7f9      	b.n	80090e8 <memset+0x4>

080090f4 <_free_r>:
 80090f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090f6:	2900      	cmp	r1, #0
 80090f8:	d048      	beq.n	800918c <_free_r+0x98>
 80090fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090fe:	9001      	str	r0, [sp, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f1a1 0404 	sub.w	r4, r1, #4
 8009106:	bfb8      	it	lt
 8009108:	18e4      	addlt	r4, r4, r3
 800910a:	f000 f8ad 	bl	8009268 <__malloc_lock>
 800910e:	4a20      	ldr	r2, [pc, #128]	; (8009190 <_free_r+0x9c>)
 8009110:	9801      	ldr	r0, [sp, #4]
 8009112:	6813      	ldr	r3, [r2, #0]
 8009114:	4615      	mov	r5, r2
 8009116:	b933      	cbnz	r3, 8009126 <_free_r+0x32>
 8009118:	6063      	str	r3, [r4, #4]
 800911a:	6014      	str	r4, [r2, #0]
 800911c:	b003      	add	sp, #12
 800911e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009122:	f000 b8a7 	b.w	8009274 <__malloc_unlock>
 8009126:	42a3      	cmp	r3, r4
 8009128:	d90b      	bls.n	8009142 <_free_r+0x4e>
 800912a:	6821      	ldr	r1, [r4, #0]
 800912c:	1862      	adds	r2, r4, r1
 800912e:	4293      	cmp	r3, r2
 8009130:	bf04      	itt	eq
 8009132:	681a      	ldreq	r2, [r3, #0]
 8009134:	685b      	ldreq	r3, [r3, #4]
 8009136:	6063      	str	r3, [r4, #4]
 8009138:	bf04      	itt	eq
 800913a:	1852      	addeq	r2, r2, r1
 800913c:	6022      	streq	r2, [r4, #0]
 800913e:	602c      	str	r4, [r5, #0]
 8009140:	e7ec      	b.n	800911c <_free_r+0x28>
 8009142:	461a      	mov	r2, r3
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b10b      	cbz	r3, 800914c <_free_r+0x58>
 8009148:	42a3      	cmp	r3, r4
 800914a:	d9fa      	bls.n	8009142 <_free_r+0x4e>
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	1855      	adds	r5, r2, r1
 8009150:	42a5      	cmp	r5, r4
 8009152:	d10b      	bne.n	800916c <_free_r+0x78>
 8009154:	6824      	ldr	r4, [r4, #0]
 8009156:	4421      	add	r1, r4
 8009158:	1854      	adds	r4, r2, r1
 800915a:	42a3      	cmp	r3, r4
 800915c:	6011      	str	r1, [r2, #0]
 800915e:	d1dd      	bne.n	800911c <_free_r+0x28>
 8009160:	681c      	ldr	r4, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	6053      	str	r3, [r2, #4]
 8009166:	4421      	add	r1, r4
 8009168:	6011      	str	r1, [r2, #0]
 800916a:	e7d7      	b.n	800911c <_free_r+0x28>
 800916c:	d902      	bls.n	8009174 <_free_r+0x80>
 800916e:	230c      	movs	r3, #12
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	e7d3      	b.n	800911c <_free_r+0x28>
 8009174:	6825      	ldr	r5, [r4, #0]
 8009176:	1961      	adds	r1, r4, r5
 8009178:	428b      	cmp	r3, r1
 800917a:	bf04      	itt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	bf04      	itt	eq
 8009184:	1949      	addeq	r1, r1, r5
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	6054      	str	r4, [r2, #4]
 800918a:	e7c7      	b.n	800911c <_free_r+0x28>
 800918c:	b003      	add	sp, #12
 800918e:	bd30      	pop	{r4, r5, pc}
 8009190:	200000b4 	.word	0x200000b4

08009194 <_malloc_r>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	1ccd      	adds	r5, r1, #3
 8009198:	f025 0503 	bic.w	r5, r5, #3
 800919c:	3508      	adds	r5, #8
 800919e:	2d0c      	cmp	r5, #12
 80091a0:	bf38      	it	cc
 80091a2:	250c      	movcc	r5, #12
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	4606      	mov	r6, r0
 80091a8:	db01      	blt.n	80091ae <_malloc_r+0x1a>
 80091aa:	42a9      	cmp	r1, r5
 80091ac:	d903      	bls.n	80091b6 <_malloc_r+0x22>
 80091ae:	230c      	movs	r3, #12
 80091b0:	6033      	str	r3, [r6, #0]
 80091b2:	2000      	movs	r0, #0
 80091b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b6:	f000 f857 	bl	8009268 <__malloc_lock>
 80091ba:	4921      	ldr	r1, [pc, #132]	; (8009240 <_malloc_r+0xac>)
 80091bc:	680a      	ldr	r2, [r1, #0]
 80091be:	4614      	mov	r4, r2
 80091c0:	b99c      	cbnz	r4, 80091ea <_malloc_r+0x56>
 80091c2:	4f20      	ldr	r7, [pc, #128]	; (8009244 <_malloc_r+0xb0>)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	b923      	cbnz	r3, 80091d2 <_malloc_r+0x3e>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 f83c 	bl	8009248 <_sbrk_r>
 80091d0:	6038      	str	r0, [r7, #0]
 80091d2:	4629      	mov	r1, r5
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 f837 	bl	8009248 <_sbrk_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d123      	bne.n	8009226 <_malloc_r+0x92>
 80091de:	230c      	movs	r3, #12
 80091e0:	6033      	str	r3, [r6, #0]
 80091e2:	4630      	mov	r0, r6
 80091e4:	f000 f846 	bl	8009274 <__malloc_unlock>
 80091e8:	e7e3      	b.n	80091b2 <_malloc_r+0x1e>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	1b5b      	subs	r3, r3, r5
 80091ee:	d417      	bmi.n	8009220 <_malloc_r+0x8c>
 80091f0:	2b0b      	cmp	r3, #11
 80091f2:	d903      	bls.n	80091fc <_malloc_r+0x68>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	441c      	add	r4, r3
 80091f8:	6025      	str	r5, [r4, #0]
 80091fa:	e004      	b.n	8009206 <_malloc_r+0x72>
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	42a2      	cmp	r2, r4
 8009200:	bf0c      	ite	eq
 8009202:	600b      	streq	r3, [r1, #0]
 8009204:	6053      	strne	r3, [r2, #4]
 8009206:	4630      	mov	r0, r6
 8009208:	f000 f834 	bl	8009274 <__malloc_unlock>
 800920c:	f104 000b 	add.w	r0, r4, #11
 8009210:	1d23      	adds	r3, r4, #4
 8009212:	f020 0007 	bic.w	r0, r0, #7
 8009216:	1ac2      	subs	r2, r0, r3
 8009218:	d0cc      	beq.n	80091b4 <_malloc_r+0x20>
 800921a:	1a1b      	subs	r3, r3, r0
 800921c:	50a3      	str	r3, [r4, r2]
 800921e:	e7c9      	b.n	80091b4 <_malloc_r+0x20>
 8009220:	4622      	mov	r2, r4
 8009222:	6864      	ldr	r4, [r4, #4]
 8009224:	e7cc      	b.n	80091c0 <_malloc_r+0x2c>
 8009226:	1cc4      	adds	r4, r0, #3
 8009228:	f024 0403 	bic.w	r4, r4, #3
 800922c:	42a0      	cmp	r0, r4
 800922e:	d0e3      	beq.n	80091f8 <_malloc_r+0x64>
 8009230:	1a21      	subs	r1, r4, r0
 8009232:	4630      	mov	r0, r6
 8009234:	f000 f808 	bl	8009248 <_sbrk_r>
 8009238:	3001      	adds	r0, #1
 800923a:	d1dd      	bne.n	80091f8 <_malloc_r+0x64>
 800923c:	e7cf      	b.n	80091de <_malloc_r+0x4a>
 800923e:	bf00      	nop
 8009240:	200000b4 	.word	0x200000b4
 8009244:	200000b8 	.word	0x200000b8

08009248 <_sbrk_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d06      	ldr	r5, [pc, #24]	; (8009264 <_sbrk_r+0x1c>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	f7f7 fe42 	bl	8000edc <_sbrk>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_sbrk_r+0x1a>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_sbrk_r+0x1a>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20000924 	.word	0x20000924

08009268 <__malloc_lock>:
 8009268:	4801      	ldr	r0, [pc, #4]	; (8009270 <__malloc_lock+0x8>)
 800926a:	f000 b809 	b.w	8009280 <__retarget_lock_acquire_recursive>
 800926e:	bf00      	nop
 8009270:	2000092c 	.word	0x2000092c

08009274 <__malloc_unlock>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__malloc_unlock+0x8>)
 8009276:	f000 b804 	b.w	8009282 <__retarget_lock_release_recursive>
 800927a:	bf00      	nop
 800927c:	2000092c 	.word	0x2000092c

08009280 <__retarget_lock_acquire_recursive>:
 8009280:	4770      	bx	lr

08009282 <__retarget_lock_release_recursive>:
 8009282:	4770      	bx	lr

08009284 <_init>:
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	bf00      	nop
 8009288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800928a:	bc08      	pop	{r3}
 800928c:	469e      	mov	lr, r3
 800928e:	4770      	bx	lr

08009290 <_fini>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	bf00      	nop
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr
